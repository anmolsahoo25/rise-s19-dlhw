//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Fri May 31 10:26:36 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1
// get                            O    32 reg
// RDY_get                        O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_x                          I    32
// EN_put                         I     1
// EN_get                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBubblesort_nt(CLK,
		       RST_N,

		       put_x,
		       EN_put,
		       RDY_put,

		       EN_get,
		       get,
		       RDY_get);
  input  CLK;
  input  RST_N;

  // action method put
  input  [31 : 0] put_x;
  input  EN_put;
  output RDY_put;

  // actionvalue method get
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_get, RDY_put;

  // register m_rg_inj
  reg [15 : 0] m_rg_inj;
  wire [15 : 0] m_rg_inj$D_IN;
  wire m_rg_inj$EN;

  // register m_xs_0
  reg [31 : 0] m_xs_0;
  wire [31 : 0] m_xs_0$D_IN;
  wire m_xs_0$EN;

  // register m_xs_1
  reg [31 : 0] m_xs_1;
  wire [31 : 0] m_xs_1$D_IN;
  wire m_xs_1$EN;

  // register m_xs_10
  reg [31 : 0] m_xs_10;
  wire [31 : 0] m_xs_10$D_IN;
  wire m_xs_10$EN;

  // register m_xs_11
  reg [31 : 0] m_xs_11;
  wire [31 : 0] m_xs_11$D_IN;
  wire m_xs_11$EN;

  // register m_xs_12
  reg [31 : 0] m_xs_12;
  wire [31 : 0] m_xs_12$D_IN;
  wire m_xs_12$EN;

  // register m_xs_13
  reg [31 : 0] m_xs_13;
  wire [31 : 0] m_xs_13$D_IN;
  wire m_xs_13$EN;

  // register m_xs_14
  reg [31 : 0] m_xs_14;
  wire [31 : 0] m_xs_14$D_IN;
  wire m_xs_14$EN;

  // register m_xs_15
  reg [31 : 0] m_xs_15;
  wire [31 : 0] m_xs_15$D_IN;
  wire m_xs_15$EN;

  // register m_xs_16
  reg [31 : 0] m_xs_16;
  wire [31 : 0] m_xs_16$D_IN;
  wire m_xs_16$EN;

  // register m_xs_17
  reg [31 : 0] m_xs_17;
  wire [31 : 0] m_xs_17$D_IN;
  wire m_xs_17$EN;

  // register m_xs_18
  reg [31 : 0] m_xs_18;
  wire [31 : 0] m_xs_18$D_IN;
  wire m_xs_18$EN;

  // register m_xs_19
  reg [31 : 0] m_xs_19;
  reg [31 : 0] m_xs_19$D_IN;
  wire m_xs_19$EN;

  // register m_xs_2
  reg [31 : 0] m_xs_2;
  wire [31 : 0] m_xs_2$D_IN;
  wire m_xs_2$EN;

  // register m_xs_3
  reg [31 : 0] m_xs_3;
  wire [31 : 0] m_xs_3$D_IN;
  wire m_xs_3$EN;

  // register m_xs_4
  reg [31 : 0] m_xs_4;
  wire [31 : 0] m_xs_4$D_IN;
  wire m_xs_4$EN;

  // register m_xs_5
  reg [31 : 0] m_xs_5;
  wire [31 : 0] m_xs_5$D_IN;
  wire m_xs_5$EN;

  // register m_xs_6
  reg [31 : 0] m_xs_6;
  wire [31 : 0] m_xs_6$D_IN;
  wire m_xs_6$EN;

  // register m_xs_7
  reg [31 : 0] m_xs_7;
  wire [31 : 0] m_xs_7$D_IN;
  wire m_xs_7$EN;

  // register m_xs_8
  reg [31 : 0] m_xs_8;
  wire [31 : 0] m_xs_8$D_IN;
  wire m_xs_8$EN;

  // register m_xs_9
  reg [31 : 0] m_xs_9;
  wire [31 : 0] m_xs_9$D_IN;
  wire m_xs_9$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_m_r1_swap_i_1,
       WILL_FIRE_RL_m_r1_swap_i_10,
       WILL_FIRE_RL_m_r1_swap_i_11,
       WILL_FIRE_RL_m_r1_swap_i_12,
       WILL_FIRE_RL_m_r1_swap_i_13,
       WILL_FIRE_RL_m_r1_swap_i_14,
       WILL_FIRE_RL_m_r1_swap_i_15,
       WILL_FIRE_RL_m_r1_swap_i_16,
       WILL_FIRE_RL_m_r1_swap_i_17,
       WILL_FIRE_RL_m_r1_swap_i_18,
       WILL_FIRE_RL_m_r1_swap_i_2,
       WILL_FIRE_RL_m_r1_swap_i_3,
       WILL_FIRE_RL_m_r1_swap_i_4,
       WILL_FIRE_RL_m_r1_swap_i_5,
       WILL_FIRE_RL_m_r1_swap_i_6,
       WILL_FIRE_RL_m_r1_swap_i_7,
       WILL_FIRE_RL_m_r1_swap_i_8,
       WILL_FIRE_RL_m_r1_swap_i_9;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_m_rg_inj$write_1__VAL_2;
  wire MUX_m_rg_inj$write_1__SEL_1;

  // remaining internal signals
  wire m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d70,
       m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d76,
       m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d82,
       m_xs_0_SLE_m_xs_1___d3,
       m_xs_10_9_SLE_m_xs_11_2___d33,
       m_xs_11_2_SLE_m_xs_12_5___d36,
       m_xs_12_5_SLE_m_xs_13_8___d39,
       m_xs_13_8_SLE_m_xs_14_1___d42,
       m_xs_14_1_SLE_m_xs_15_4___d45,
       m_xs_15_4_SLE_m_xs_16_7___d48,
       m_xs_16_7_SLE_m_xs_17_0___d51,
       m_xs_17_0_SLE_m_xs_18_3___d54,
       m_xs_18_3_SLE_m_xs_19_6___d57,
       m_xs_1_SLE_m_xs_2___d6,
       m_xs_2_SLE_m_xs_3___d9,
       m_xs_3_SLE_m_xs_4_1___d12,
       m_xs_4_1_SLE_m_xs_5_4___d15,
       m_xs_5_4_SLE_m_xs_6_7___d18,
       m_xs_6_7_SLE_m_xs_7_0___d21,
       m_xs_7_0_SLE_m_xs_8_3___d24,
       m_xs_8_3_SLE_m_xs_9_6___d27,
       m_xs_9_6_SLE_m_xs_10_9___d30;

  // action method put
  assign RDY_put =
	     (m_rg_inj ^ 16'h8000) < 16'd32788 && m_xs_19 == 32'h7FFFFFFF ;

  // actionvalue method get
  assign get = m_xs_0 ;
  assign RDY_get =
	     m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d82 &&
	     m_xs_18_3_SLE_m_xs_19_6___d57 ;

  // rule RL_m_r1_swap_i_1
  assign WILL_FIRE_RL_m_r1_swap_i_1 =
	     !m_xs_1_SLE_m_xs_2___d6 && !(!m_xs_0_SLE_m_xs_1___d3) ;

  // rule RL_m_r1_swap_i_2
  assign WILL_FIRE_RL_m_r1_swap_i_2 =
	     !m_xs_2_SLE_m_xs_3___d9 && !WILL_FIRE_RL_m_r1_swap_i_1 ;

  // rule RL_m_r1_swap_i_3
  assign WILL_FIRE_RL_m_r1_swap_i_3 =
	     !m_xs_3_SLE_m_xs_4_1___d12 && !WILL_FIRE_RL_m_r1_swap_i_2 ;

  // rule RL_m_r1_swap_i_4
  assign WILL_FIRE_RL_m_r1_swap_i_4 =
	     !m_xs_4_1_SLE_m_xs_5_4___d15 && !WILL_FIRE_RL_m_r1_swap_i_3 ;

  // rule RL_m_r1_swap_i_5
  assign WILL_FIRE_RL_m_r1_swap_i_5 =
	     !m_xs_5_4_SLE_m_xs_6_7___d18 && !WILL_FIRE_RL_m_r1_swap_i_4 ;

  // rule RL_m_r1_swap_i_6
  assign WILL_FIRE_RL_m_r1_swap_i_6 =
	     !m_xs_6_7_SLE_m_xs_7_0___d21 && !WILL_FIRE_RL_m_r1_swap_i_5 ;

  // rule RL_m_r1_swap_i_7
  assign WILL_FIRE_RL_m_r1_swap_i_7 =
	     !m_xs_7_0_SLE_m_xs_8_3___d24 && !WILL_FIRE_RL_m_r1_swap_i_6 ;

  // rule RL_m_r1_swap_i_8
  assign WILL_FIRE_RL_m_r1_swap_i_8 =
	     !m_xs_8_3_SLE_m_xs_9_6___d27 && !WILL_FIRE_RL_m_r1_swap_i_7 ;

  // rule RL_m_r1_swap_i_9
  assign WILL_FIRE_RL_m_r1_swap_i_9 =
	     !m_xs_9_6_SLE_m_xs_10_9___d30 && !WILL_FIRE_RL_m_r1_swap_i_8 ;

  // rule RL_m_r1_swap_i_10
  assign WILL_FIRE_RL_m_r1_swap_i_10 =
	     !m_xs_10_9_SLE_m_xs_11_2___d33 && !WILL_FIRE_RL_m_r1_swap_i_9 ;

  // rule RL_m_r1_swap_i_11
  assign WILL_FIRE_RL_m_r1_swap_i_11 =
	     !m_xs_11_2_SLE_m_xs_12_5___d36 && !WILL_FIRE_RL_m_r1_swap_i_10 ;

  // rule RL_m_r1_swap_i_12
  assign WILL_FIRE_RL_m_r1_swap_i_12 =
	     !m_xs_12_5_SLE_m_xs_13_8___d39 && !WILL_FIRE_RL_m_r1_swap_i_11 ;

  // rule RL_m_r1_swap_i_13
  assign WILL_FIRE_RL_m_r1_swap_i_13 =
	     !m_xs_13_8_SLE_m_xs_14_1___d42 && !WILL_FIRE_RL_m_r1_swap_i_12 ;

  // rule RL_m_r1_swap_i_14
  assign WILL_FIRE_RL_m_r1_swap_i_14 =
	     !m_xs_14_1_SLE_m_xs_15_4___d45 && !WILL_FIRE_RL_m_r1_swap_i_13 ;

  // rule RL_m_r1_swap_i_15
  assign WILL_FIRE_RL_m_r1_swap_i_15 =
	     !m_xs_15_4_SLE_m_xs_16_7___d48 && !WILL_FIRE_RL_m_r1_swap_i_14 ;

  // rule RL_m_r1_swap_i_16
  assign WILL_FIRE_RL_m_r1_swap_i_16 =
	     !m_xs_16_7_SLE_m_xs_17_0___d51 && !WILL_FIRE_RL_m_r1_swap_i_15 ;

  // rule RL_m_r1_swap_i_17
  assign WILL_FIRE_RL_m_r1_swap_i_17 =
	     !m_xs_17_0_SLE_m_xs_18_3___d54 && !WILL_FIRE_RL_m_r1_swap_i_16 ;

  // rule RL_m_r1_swap_i_18
  assign WILL_FIRE_RL_m_r1_swap_i_18 =
	     !m_xs_18_3_SLE_m_xs_19_6___d57 && !WILL_FIRE_RL_m_r1_swap_i_17 ;

  // inputs to muxes for submodule ports
  assign MUX_m_rg_inj$write_1__SEL_1 = EN_get && m_xs_1 == 32'h7FFFFFFF ;
  assign MUX_m_rg_inj$write_1__VAL_2 = m_rg_inj + 16'd1 ;

  // register m_rg_inj
  assign m_rg_inj$D_IN =
	     MUX_m_rg_inj$write_1__SEL_1 ?
	       16'd0 :
	       MUX_m_rg_inj$write_1__VAL_2 ;
  assign m_rg_inj$EN = EN_get && m_xs_1 == 32'h7FFFFFFF || EN_put ;

  // register m_xs_0
  assign m_xs_0$D_IN = m_xs_1 ;
  assign m_xs_0$EN = !m_xs_0_SLE_m_xs_1___d3 || EN_get ;

  // register m_xs_1
  assign m_xs_1$D_IN = (!m_xs_0_SLE_m_xs_1___d3) ? m_xs_0 : m_xs_2 ;
  assign m_xs_1$EN =
	     !m_xs_0_SLE_m_xs_1___d3 || WILL_FIRE_RL_m_r1_swap_i_1 || EN_get ;

  // register m_xs_10
  assign m_xs_10$D_IN = WILL_FIRE_RL_m_r1_swap_i_9 ? m_xs_9 : m_xs_11 ;
  assign m_xs_10$EN =
	     WILL_FIRE_RL_m_r1_swap_i_9 || WILL_FIRE_RL_m_r1_swap_i_10 ||
	     EN_get ;

  // register m_xs_11
  assign m_xs_11$D_IN = WILL_FIRE_RL_m_r1_swap_i_10 ? m_xs_10 : m_xs_12 ;
  assign m_xs_11$EN =
	     WILL_FIRE_RL_m_r1_swap_i_10 || WILL_FIRE_RL_m_r1_swap_i_11 ||
	     EN_get ;

  // register m_xs_12
  assign m_xs_12$D_IN = WILL_FIRE_RL_m_r1_swap_i_11 ? m_xs_11 : m_xs_13 ;
  assign m_xs_12$EN =
	     WILL_FIRE_RL_m_r1_swap_i_11 || WILL_FIRE_RL_m_r1_swap_i_12 ||
	     EN_get ;

  // register m_xs_13
  assign m_xs_13$D_IN = WILL_FIRE_RL_m_r1_swap_i_12 ? m_xs_12 : m_xs_14 ;
  assign m_xs_13$EN =
	     WILL_FIRE_RL_m_r1_swap_i_12 || WILL_FIRE_RL_m_r1_swap_i_13 ||
	     EN_get ;

  // register m_xs_14
  assign m_xs_14$D_IN = WILL_FIRE_RL_m_r1_swap_i_13 ? m_xs_13 : m_xs_15 ;
  assign m_xs_14$EN =
	     WILL_FIRE_RL_m_r1_swap_i_13 || WILL_FIRE_RL_m_r1_swap_i_14 ||
	     EN_get ;

  // register m_xs_15
  assign m_xs_15$D_IN = WILL_FIRE_RL_m_r1_swap_i_14 ? m_xs_14 : m_xs_16 ;
  assign m_xs_15$EN =
	     WILL_FIRE_RL_m_r1_swap_i_14 || WILL_FIRE_RL_m_r1_swap_i_15 ||
	     EN_get ;

  // register m_xs_16
  assign m_xs_16$D_IN = WILL_FIRE_RL_m_r1_swap_i_15 ? m_xs_15 : m_xs_17 ;
  assign m_xs_16$EN =
	     WILL_FIRE_RL_m_r1_swap_i_15 || WILL_FIRE_RL_m_r1_swap_i_16 ||
	     EN_get ;

  // register m_xs_17
  assign m_xs_17$D_IN = WILL_FIRE_RL_m_r1_swap_i_16 ? m_xs_16 : m_xs_18 ;
  assign m_xs_17$EN =
	     WILL_FIRE_RL_m_r1_swap_i_16 || WILL_FIRE_RL_m_r1_swap_i_17 ||
	     EN_get ;

  // register m_xs_18
  assign m_xs_18$D_IN = WILL_FIRE_RL_m_r1_swap_i_17 ? m_xs_17 : m_xs_19 ;
  assign m_xs_18$EN =
	     WILL_FIRE_RL_m_r1_swap_i_17 || WILL_FIRE_RL_m_r1_swap_i_18 ||
	     EN_get ;

  // register m_xs_19
  always@(EN_put or put_x or WILL_FIRE_RL_m_r1_swap_i_18 or m_xs_18 or EN_get)
  begin
    case (1'b1) // synopsys parallel_case
      EN_put: m_xs_19$D_IN = put_x;
      WILL_FIRE_RL_m_r1_swap_i_18: m_xs_19$D_IN = m_xs_18;
      EN_get: m_xs_19$D_IN = 32'h7FFFFFFF;
      default: m_xs_19$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign m_xs_19$EN = EN_put || WILL_FIRE_RL_m_r1_swap_i_18 || EN_get ;

  // register m_xs_2
  assign m_xs_2$D_IN = WILL_FIRE_RL_m_r1_swap_i_1 ? m_xs_1 : m_xs_3 ;
  assign m_xs_2$EN =
	     WILL_FIRE_RL_m_r1_swap_i_1 || WILL_FIRE_RL_m_r1_swap_i_2 ||
	     EN_get ;

  // register m_xs_3
  assign m_xs_3$D_IN = WILL_FIRE_RL_m_r1_swap_i_2 ? m_xs_2 : m_xs_4 ;
  assign m_xs_3$EN =
	     WILL_FIRE_RL_m_r1_swap_i_2 || WILL_FIRE_RL_m_r1_swap_i_3 ||
	     EN_get ;

  // register m_xs_4
  assign m_xs_4$D_IN = WILL_FIRE_RL_m_r1_swap_i_3 ? m_xs_3 : m_xs_5 ;
  assign m_xs_4$EN =
	     WILL_FIRE_RL_m_r1_swap_i_3 || WILL_FIRE_RL_m_r1_swap_i_4 ||
	     EN_get ;

  // register m_xs_5
  assign m_xs_5$D_IN = WILL_FIRE_RL_m_r1_swap_i_4 ? m_xs_4 : m_xs_6 ;
  assign m_xs_5$EN =
	     WILL_FIRE_RL_m_r1_swap_i_4 || WILL_FIRE_RL_m_r1_swap_i_5 ||
	     EN_get ;

  // register m_xs_6
  assign m_xs_6$D_IN = WILL_FIRE_RL_m_r1_swap_i_5 ? m_xs_5 : m_xs_7 ;
  assign m_xs_6$EN =
	     WILL_FIRE_RL_m_r1_swap_i_5 || WILL_FIRE_RL_m_r1_swap_i_6 ||
	     EN_get ;

  // register m_xs_7
  assign m_xs_7$D_IN = WILL_FIRE_RL_m_r1_swap_i_6 ? m_xs_6 : m_xs_8 ;
  assign m_xs_7$EN =
	     WILL_FIRE_RL_m_r1_swap_i_6 || WILL_FIRE_RL_m_r1_swap_i_7 ||
	     EN_get ;

  // register m_xs_8
  assign m_xs_8$D_IN = WILL_FIRE_RL_m_r1_swap_i_7 ? m_xs_7 : m_xs_9 ;
  assign m_xs_8$EN =
	     WILL_FIRE_RL_m_r1_swap_i_7 || WILL_FIRE_RL_m_r1_swap_i_8 ||
	     EN_get ;

  // register m_xs_9
  assign m_xs_9$D_IN = WILL_FIRE_RL_m_r1_swap_i_8 ? m_xs_8 : m_xs_10 ;
  assign m_xs_9$EN =
	     WILL_FIRE_RL_m_r1_swap_i_8 || WILL_FIRE_RL_m_r1_swap_i_9 ||
	     EN_get ;

  // remaining internal signals
  assign m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d70 =
	     m_rg_inj == 16'd20 && m_xs_0_SLE_m_xs_1___d3 &&
	     m_xs_1_SLE_m_xs_2___d6 &&
	     m_xs_2_SLE_m_xs_3___d9 &&
	     m_xs_3_SLE_m_xs_4_1___d12 &&
	     m_xs_4_1_SLE_m_xs_5_4___d15 &&
	     m_xs_5_4_SLE_m_xs_6_7___d18 ;
  assign m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d76 =
	     m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d70 &&
	     m_xs_6_7_SLE_m_xs_7_0___d21 &&
	     m_xs_7_0_SLE_m_xs_8_3___d24 &&
	     m_xs_8_3_SLE_m_xs_9_6___d27 &&
	     m_xs_9_6_SLE_m_xs_10_9___d30 &&
	     m_xs_10_9_SLE_m_xs_11_2___d33 &&
	     m_xs_11_2_SLE_m_xs_12_5___d36 ;
  assign m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d82 =
	     m_rg_inj_9_EQ_20_4_AND_m_xs_0_SLE_m_xs_1_5_AND_ETC___d76 &&
	     m_xs_12_5_SLE_m_xs_13_8___d39 &&
	     m_xs_13_8_SLE_m_xs_14_1___d42 &&
	     m_xs_14_1_SLE_m_xs_15_4___d45 &&
	     m_xs_15_4_SLE_m_xs_16_7___d48 &&
	     m_xs_16_7_SLE_m_xs_17_0___d51 &&
	     m_xs_17_0_SLE_m_xs_18_3___d54 ;
  assign m_xs_0_SLE_m_xs_1___d3 =
	     (m_xs_0 ^ 32'h80000000) <= (m_xs_1 ^ 32'h80000000) ;
  assign m_xs_10_9_SLE_m_xs_11_2___d33 =
	     (m_xs_10 ^ 32'h80000000) <= (m_xs_11 ^ 32'h80000000) ;
  assign m_xs_11_2_SLE_m_xs_12_5___d36 =
	     (m_xs_11 ^ 32'h80000000) <= (m_xs_12 ^ 32'h80000000) ;
  assign m_xs_12_5_SLE_m_xs_13_8___d39 =
	     (m_xs_12 ^ 32'h80000000) <= (m_xs_13 ^ 32'h80000000) ;
  assign m_xs_13_8_SLE_m_xs_14_1___d42 =
	     (m_xs_13 ^ 32'h80000000) <= (m_xs_14 ^ 32'h80000000) ;
  assign m_xs_14_1_SLE_m_xs_15_4___d45 =
	     (m_xs_14 ^ 32'h80000000) <= (m_xs_15 ^ 32'h80000000) ;
  assign m_xs_15_4_SLE_m_xs_16_7___d48 =
	     (m_xs_15 ^ 32'h80000000) <= (m_xs_16 ^ 32'h80000000) ;
  assign m_xs_16_7_SLE_m_xs_17_0___d51 =
	     (m_xs_16 ^ 32'h80000000) <= (m_xs_17 ^ 32'h80000000) ;
  assign m_xs_17_0_SLE_m_xs_18_3___d54 =
	     (m_xs_17 ^ 32'h80000000) <= (m_xs_18 ^ 32'h80000000) ;
  assign m_xs_18_3_SLE_m_xs_19_6___d57 =
	     (m_xs_18 ^ 32'h80000000) <= (m_xs_19 ^ 32'h80000000) ;
  assign m_xs_1_SLE_m_xs_2___d6 =
	     (m_xs_1 ^ 32'h80000000) <= (m_xs_2 ^ 32'h80000000) ;
  assign m_xs_2_SLE_m_xs_3___d9 =
	     (m_xs_2 ^ 32'h80000000) <= (m_xs_3 ^ 32'h80000000) ;
  assign m_xs_3_SLE_m_xs_4_1___d12 =
	     (m_xs_3 ^ 32'h80000000) <= (m_xs_4 ^ 32'h80000000) ;
  assign m_xs_4_1_SLE_m_xs_5_4___d15 =
	     (m_xs_4 ^ 32'h80000000) <= (m_xs_5 ^ 32'h80000000) ;
  assign m_xs_5_4_SLE_m_xs_6_7___d18 =
	     (m_xs_5 ^ 32'h80000000) <= (m_xs_6 ^ 32'h80000000) ;
  assign m_xs_6_7_SLE_m_xs_7_0___d21 =
	     (m_xs_6 ^ 32'h80000000) <= (m_xs_7 ^ 32'h80000000) ;
  assign m_xs_7_0_SLE_m_xs_8_3___d24 =
	     (m_xs_7 ^ 32'h80000000) <= (m_xs_8 ^ 32'h80000000) ;
  assign m_xs_8_3_SLE_m_xs_9_6___d27 =
	     (m_xs_8 ^ 32'h80000000) <= (m_xs_9 ^ 32'h80000000) ;
  assign m_xs_9_6_SLE_m_xs_10_9___d30 =
	     (m_xs_9 ^ 32'h80000000) <= (m_xs_10 ^ 32'h80000000) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_rg_inj <= `BSV_ASSIGNMENT_DELAY 16'd0;
	m_xs_0 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_1 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_10 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_11 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_12 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_13 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_14 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_15 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_16 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_17 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_18 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_19 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_2 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_3 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_4 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_5 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_6 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_7 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_8 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
	m_xs_9 <= `BSV_ASSIGNMENT_DELAY 32'h7FFFFFFF;
      end
    else
      begin
        if (m_rg_inj$EN) m_rg_inj <= `BSV_ASSIGNMENT_DELAY m_rg_inj$D_IN;
	if (m_xs_0$EN) m_xs_0 <= `BSV_ASSIGNMENT_DELAY m_xs_0$D_IN;
	if (m_xs_1$EN) m_xs_1 <= `BSV_ASSIGNMENT_DELAY m_xs_1$D_IN;
	if (m_xs_10$EN) m_xs_10 <= `BSV_ASSIGNMENT_DELAY m_xs_10$D_IN;
	if (m_xs_11$EN) m_xs_11 <= `BSV_ASSIGNMENT_DELAY m_xs_11$D_IN;
	if (m_xs_12$EN) m_xs_12 <= `BSV_ASSIGNMENT_DELAY m_xs_12$D_IN;
	if (m_xs_13$EN) m_xs_13 <= `BSV_ASSIGNMENT_DELAY m_xs_13$D_IN;
	if (m_xs_14$EN) m_xs_14 <= `BSV_ASSIGNMENT_DELAY m_xs_14$D_IN;
	if (m_xs_15$EN) m_xs_15 <= `BSV_ASSIGNMENT_DELAY m_xs_15$D_IN;
	if (m_xs_16$EN) m_xs_16 <= `BSV_ASSIGNMENT_DELAY m_xs_16$D_IN;
	if (m_xs_17$EN) m_xs_17 <= `BSV_ASSIGNMENT_DELAY m_xs_17$D_IN;
	if (m_xs_18$EN) m_xs_18 <= `BSV_ASSIGNMENT_DELAY m_xs_18$D_IN;
	if (m_xs_19$EN) m_xs_19 <= `BSV_ASSIGNMENT_DELAY m_xs_19$D_IN;
	if (m_xs_2$EN) m_xs_2 <= `BSV_ASSIGNMENT_DELAY m_xs_2$D_IN;
	if (m_xs_3$EN) m_xs_3 <= `BSV_ASSIGNMENT_DELAY m_xs_3$D_IN;
	if (m_xs_4$EN) m_xs_4 <= `BSV_ASSIGNMENT_DELAY m_xs_4$D_IN;
	if (m_xs_5$EN) m_xs_5 <= `BSV_ASSIGNMENT_DELAY m_xs_5$D_IN;
	if (m_xs_6$EN) m_xs_6 <= `BSV_ASSIGNMENT_DELAY m_xs_6$D_IN;
	if (m_xs_7$EN) m_xs_7 <= `BSV_ASSIGNMENT_DELAY m_xs_7$D_IN;
	if (m_xs_8$EN) m_xs_8 <= `BSV_ASSIGNMENT_DELAY m_xs_8$D_IN;
	if (m_xs_9$EN) m_xs_9 <= `BSV_ASSIGNMENT_DELAY m_xs_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_rg_inj = 16'hAAAA;
    m_xs_0 = 32'hAAAAAAAA;
    m_xs_1 = 32'hAAAAAAAA;
    m_xs_10 = 32'hAAAAAAAA;
    m_xs_11 = 32'hAAAAAAAA;
    m_xs_12 = 32'hAAAAAAAA;
    m_xs_13 = 32'hAAAAAAAA;
    m_xs_14 = 32'hAAAAAAAA;
    m_xs_15 = 32'hAAAAAAAA;
    m_xs_16 = 32'hAAAAAAAA;
    m_xs_17 = 32'hAAAAAAAA;
    m_xs_18 = 32'hAAAAAAAA;
    m_xs_19 = 32'hAAAAAAAA;
    m_xs_2 = 32'hAAAAAAAA;
    m_xs_3 = 32'hAAAAAAAA;
    m_xs_4 = 32'hAAAAAAAA;
    m_xs_5 = 32'hAAAAAAAA;
    m_xs_6 = 32'hAAAAAAAA;
    m_xs_7 = 32'hAAAAAAAA;
    m_xs_8 = 32'hAAAAAAAA;
    m_xs_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBubblesort_nt

