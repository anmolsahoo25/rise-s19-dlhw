//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Thu Jun 27 15:11:58 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_xinput1                    O     1
// RDY_xinput2                    O     1
// RDY_xinput3                    O     1
// RDY_xinput4                    O     1
// RDY_xinput5                    O     1
// RDY_xinput6                    O     1
// RDY_xinput7                    O     1
// RDY_yinput1                    O     1
// RDY_yinput2                    O     1
// RDY_yinput3                    O     1
// RDY_yinput4                    O     1
// RDY_winput1                    O     1
// RDY_winput2                    O     1
// RDY_winput3                    O     1
// RDY_winput4                    O     1
// youtput1                       O    32
// RDY_youtput1                   O     1
// youtput2                       O    32
// RDY_youtput2                   O     1
// youtput3                       O    32
// RDY_youtput3                   O     1
// youtput4                       O    32
// RDY_youtput4                   O     1
// RDY_weighttran                 O     1 const
// RDY_convs                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// xinput1_x                      I    32 reg
// xinput2_x                      I    32 reg
// xinput3_x                      I    32 reg
// xinput4_x                      I    32 reg
// xinput5_x                      I    32 reg
// xinput6_x                      I    32 reg
// xinput7_x                      I    32 reg
// yinput1_x                      I    32 reg
// yinput2_x                      I    32 reg
// yinput3_x                      I    32 reg
// yinput4_x                      I    32 reg
// winput1_x                      I    32 reg
// winput2_x                      I    32 reg
// winput3_x                      I    32 reg
// winput4_x                      I    32 reg
// weighttran_x                   I    32
// convs_x                        I    32
// EN_xinput1                     I     1
// EN_xinput2                     I     1
// EN_xinput3                     I     1
// EN_xinput4                     I     1
// EN_xinput5                     I     1
// EN_xinput6                     I     1
// EN_xinput7                     I     1
// EN_yinput1                     I     1
// EN_yinput2                     I     1
// EN_yinput3                     I     1
// EN_yinput4                     I     1
// EN_winput1                     I     1
// EN_winput2                     I     1
// EN_winput3                     I     1
// EN_winput4                     I     1
// EN_weighttran                  I     1
// EN_convs                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPEArray(CLK,
		 RST_N,

		 xinput1_x,
		 EN_xinput1,
		 RDY_xinput1,

		 xinput2_x,
		 EN_xinput2,
		 RDY_xinput2,

		 xinput3_x,
		 EN_xinput3,
		 RDY_xinput3,

		 xinput4_x,
		 EN_xinput4,
		 RDY_xinput4,

		 xinput5_x,
		 EN_xinput5,
		 RDY_xinput5,

		 xinput6_x,
		 EN_xinput6,
		 RDY_xinput6,

		 xinput7_x,
		 EN_xinput7,
		 RDY_xinput7,

		 yinput1_x,
		 EN_yinput1,
		 RDY_yinput1,

		 yinput2_x,
		 EN_yinput2,
		 RDY_yinput2,

		 yinput3_x,
		 EN_yinput3,
		 RDY_yinput3,

		 yinput4_x,
		 EN_yinput4,
		 RDY_yinput4,

		 winput1_x,
		 EN_winput1,
		 RDY_winput1,

		 winput2_x,
		 EN_winput2,
		 RDY_winput2,

		 winput3_x,
		 EN_winput3,
		 RDY_winput3,

		 winput4_x,
		 EN_winput4,
		 RDY_winput4,

		 youtput1,
		 RDY_youtput1,

		 youtput2,
		 RDY_youtput2,

		 youtput3,
		 RDY_youtput3,

		 youtput4,
		 RDY_youtput4,

		 weighttran_x,
		 EN_weighttran,
		 RDY_weighttran,

		 convs_x,
		 EN_convs,
		 RDY_convs);
  input  CLK;
  input  RST_N;

  // action method xinput1
  input  [31 : 0] xinput1_x;
  input  EN_xinput1;
  output RDY_xinput1;

  // action method xinput2
  input  [31 : 0] xinput2_x;
  input  EN_xinput2;
  output RDY_xinput2;

  // action method xinput3
  input  [31 : 0] xinput3_x;
  input  EN_xinput3;
  output RDY_xinput3;

  // action method xinput4
  input  [31 : 0] xinput4_x;
  input  EN_xinput4;
  output RDY_xinput4;

  // action method xinput5
  input  [31 : 0] xinput5_x;
  input  EN_xinput5;
  output RDY_xinput5;

  // action method xinput6
  input  [31 : 0] xinput6_x;
  input  EN_xinput6;
  output RDY_xinput6;

  // action method xinput7
  input  [31 : 0] xinput7_x;
  input  EN_xinput7;
  output RDY_xinput7;

  // action method yinput1
  input  [31 : 0] yinput1_x;
  input  EN_yinput1;
  output RDY_yinput1;

  // action method yinput2
  input  [31 : 0] yinput2_x;
  input  EN_yinput2;
  output RDY_yinput2;

  // action method yinput3
  input  [31 : 0] yinput3_x;
  input  EN_yinput3;
  output RDY_yinput3;

  // action method yinput4
  input  [31 : 0] yinput4_x;
  input  EN_yinput4;
  output RDY_yinput4;

  // action method winput1
  input  [31 : 0] winput1_x;
  input  EN_winput1;
  output RDY_winput1;

  // action method winput2
  input  [31 : 0] winput2_x;
  input  EN_winput2;
  output RDY_winput2;

  // action method winput3
  input  [31 : 0] winput3_x;
  input  EN_winput3;
  output RDY_winput3;

  // action method winput4
  input  [31 : 0] winput4_x;
  input  EN_winput4;
  output RDY_winput4;

  // value method youtput1
  output [31 : 0] youtput1;
  output RDY_youtput1;

  // value method youtput2
  output [31 : 0] youtput2;
  output RDY_youtput2;

  // value method youtput3
  output [31 : 0] youtput3;
  output RDY_youtput3;

  // value method youtput4
  output [31 : 0] youtput4;
  output RDY_youtput4;

  // action method weighttran
  input  [31 : 0] weighttran_x;
  input  EN_weighttran;
  output RDY_weighttran;

  // action method convs
  input  [31 : 0] convs_x;
  input  EN_convs;
  output RDY_convs;

  // signals for module outputs
  wire [31 : 0] youtput1, youtput2, youtput3, youtput4;
  wire RDY_convs,
       RDY_weighttran,
       RDY_winput1,
       RDY_winput2,
       RDY_winput3,
       RDY_winput4,
       RDY_xinput1,
       RDY_xinput2,
       RDY_xinput3,
       RDY_xinput4,
       RDY_xinput5,
       RDY_xinput6,
       RDY_xinput7,
       RDY_yinput1,
       RDY_yinput2,
       RDY_yinput3,
       RDY_yinput4,
       RDY_youtput1,
       RDY_youtput2,
       RDY_youtput3,
       RDY_youtput4;

  // register conv
  reg [31 : 0] conv;
  wire [31 : 0] conv$D_IN;
  wire conv$EN;

  // register delay_0
  reg [31 : 0] delay_0;
  wire [31 : 0] delay_0$D_IN;
  wire delay_0$EN;

  // register delay_1
  reg [31 : 0] delay_1;
  wire [31 : 0] delay_1$D_IN;
  wire delay_1$EN;

  // register delay_2
  reg [31 : 0] delay_2;
  wire [31 : 0] delay_2$D_IN;
  wire delay_2$EN;

  // register delay_3
  reg [31 : 0] delay_3;
  wire [31 : 0] delay_3$D_IN;
  wire delay_3$EN;

  // register delay_4
  reg [31 : 0] delay_4;
  wire [31 : 0] delay_4$D_IN;
  wire delay_4$EN;

  // register delay_5
  reg [31 : 0] delay_5;
  wire [31 : 0] delay_5$D_IN;
  wire delay_5$EN;

  // register weighttrans
  reg [31 : 0] weighttrans;
  wire [31 : 0] weighttrans$D_IN;
  wire weighttrans$EN;

  // ports of submodule col0_0
  wire [31 : 0] col0_0$downoutput,
		col0_0$leftinput_x,
		col0_0$upinput_y,
		col0_0$weightinp_w,
		col0_0$weightoutput;
  wire col0_0$EN_leftinput, col0_0$EN_upinput, col0_0$EN_weightinp;

  // ports of submodule col0_1
  wire [31 : 0] col0_1$downoutput,
		col0_1$leftinput_x,
		col0_1$rightoutput,
		col0_1$upinput_y,
		col0_1$weightinp_w,
		col0_1$weightoutput;
  wire col0_1$EN_leftinput, col0_1$EN_upinput, col0_1$EN_weightinp;

  // ports of submodule col0_2
  wire [31 : 0] col0_2$downoutput,
		col0_2$leftinput_x,
		col0_2$rightoutput,
		col0_2$upinput_y,
		col0_2$weightinp_w,
		col0_2$weightoutput;
  wire col0_2$EN_leftinput, col0_2$EN_upinput, col0_2$EN_weightinp;

  // ports of submodule col0_3
  wire [31 : 0] col0_3$downoutput,
		col0_3$leftinput_x,
		col0_3$rightoutput,
		col0_3$upinput_y,
		col0_3$weightinp_w,
		col0_3$weightoutput;
  wire col0_3$EN_leftinput, col0_3$EN_upinput, col0_3$EN_weightinp;

  // ports of submodule col1_0
  wire [31 : 0] col1_0$downoutput,
		col1_0$leftinput_x,
		col1_0$rightoutput,
		col1_0$upinput_y,
		col1_0$weightinp_w,
		col1_0$weightoutput;
  wire col1_0$EN_leftinput, col1_0$EN_upinput, col1_0$EN_weightinp;

  // ports of submodule col1_1
  wire [31 : 0] col1_1$downoutput,
		col1_1$leftinput_x,
		col1_1$rightoutput,
		col1_1$upinput_y,
		col1_1$weightinp_w,
		col1_1$weightoutput;
  wire col1_1$EN_leftinput, col1_1$EN_upinput, col1_1$EN_weightinp;

  // ports of submodule col1_2
  wire [31 : 0] col1_2$downoutput,
		col1_2$leftinput_x,
		col1_2$rightoutput,
		col1_2$upinput_y,
		col1_2$weightinp_w,
		col1_2$weightoutput;
  wire col1_2$EN_leftinput, col1_2$EN_upinput, col1_2$EN_weightinp;

  // ports of submodule col1_3
  wire [31 : 0] col1_3$downoutput,
		col1_3$leftinput_x,
		col1_3$upinput_y,
		col1_3$weightinp_w,
		col1_3$weightoutput;
  wire col1_3$EN_leftinput, col1_3$EN_upinput, col1_3$EN_weightinp;

  // ports of submodule col2_0
  wire [31 : 0] col2_0$downoutput,
		col2_0$leftinput_x,
		col2_0$rightoutput,
		col2_0$upinput_y,
		col2_0$weightinp_w,
		col2_0$weightoutput;
  wire col2_0$EN_leftinput, col2_0$EN_upinput, col2_0$EN_weightinp;

  // ports of submodule col2_1
  wire [31 : 0] col2_1$downoutput,
		col2_1$leftinput_x,
		col2_1$rightoutput,
		col2_1$upinput_y,
		col2_1$weightinp_w,
		col2_1$weightoutput;
  wire col2_1$EN_leftinput, col2_1$EN_upinput, col2_1$EN_weightinp;

  // ports of submodule col2_2
  wire [31 : 0] col2_2$downoutput,
		col2_2$leftinput_x,
		col2_2$rightoutput,
		col2_2$upinput_y,
		col2_2$weightinp_w,
		col2_2$weightoutput;
  wire col2_2$EN_leftinput, col2_2$EN_upinput, col2_2$EN_weightinp;

  // ports of submodule col2_3
  wire [31 : 0] col2_3$downoutput,
		col2_3$leftinput_x,
		col2_3$upinput_y,
		col2_3$weightinp_w,
		col2_3$weightoutput;
  wire col2_3$EN_leftinput, col2_3$EN_upinput, col2_3$EN_weightinp;

  // ports of submodule col3_0
  wire [31 : 0] col3_0$downoutput,
		col3_0$leftinput_x,
		col3_0$rightoutput,
		col3_0$upinput_y,
		col3_0$weightinp_w,
		col3_0$weightoutput;
  wire col3_0$EN_leftinput, col3_0$EN_upinput, col3_0$EN_weightinp;

  // ports of submodule col3_1
  wire [31 : 0] col3_1$downoutput,
		col3_1$leftinput_x,
		col3_1$rightoutput,
		col3_1$upinput_y,
		col3_1$weightinp_w;
  wire col3_1$EN_leftinput, col3_1$EN_upinput, col3_1$EN_weightinp;

  // ports of submodule col3_2
  wire [31 : 0] col3_2$downoutput,
		col3_2$leftinput_x,
		col3_2$rightoutput,
		col3_2$upinput_y,
		col3_2$weightinp_w;
  wire col3_2$EN_leftinput, col3_2$EN_upinput, col3_2$EN_weightinp;

  // ports of submodule col3_3
  wire [31 : 0] col3_3$downoutput,
		col3_3$leftinput_x,
		col3_3$upinput_y,
		col3_3$weightinp_w;
  wire col3_3$EN_leftinput, col3_3$EN_upinput, col3_3$EN_weightinp;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h6470;
  reg [63 : 0] v__h2714;
  reg [63 : 0] v__h6562;
  reg [63 : 0] v__h3041;
  reg [63 : 0] v__h3089;
  reg [63 : 0] v__h6654;
  reg [63 : 0] v__h3484;
  reg [63 : 0] v__h3541;
  reg [63 : 0] v__h3589;
  reg [63 : 0] v__h4389;
  reg [63 : 0] v__h4512;
  reg [63 : 0] v__h4626;
  reg [63 : 0] v__h5465;
  reg [63 : 0] v__h5522;
  reg [63 : 0] v__h5570;
  reg [63 : 0] v__h5833;
  reg [63 : 0] v__h5890;
  reg [63 : 0] v__h5938;
  // synopsys translate_on

  // action method xinput1
  assign RDY_xinput1 = RDY_youtput4 ;

  // action method xinput2
  assign RDY_xinput2 = RDY_youtput4 ;

  // action method xinput3
  assign RDY_xinput3 = RDY_youtput4 ;

  // action method xinput4
  assign RDY_xinput4 = RDY_youtput4 ;

  // action method xinput5
  assign RDY_xinput5 = RDY_youtput4 ;

  // action method xinput6
  assign RDY_xinput6 = RDY_youtput4 ;

  // action method xinput7
  assign RDY_xinput7 = RDY_youtput4 ;

  // action method yinput1
  assign RDY_yinput1 = RDY_youtput4 ;

  // action method yinput2
  assign RDY_yinput2 = RDY_youtput4 ;

  // action method yinput3
  assign RDY_yinput3 = RDY_youtput4 ;

  // action method yinput4
  assign RDY_yinput4 = RDY_youtput4 ;

  // action method winput1
  assign RDY_winput1 = RDY_winput4 ;

  // action method winput2
  assign RDY_winput2 = RDY_winput4 ;

  // action method winput3
  assign RDY_winput3 = RDY_winput4 ;

  // action method winput4
  assign RDY_winput4 = weighttrans == 32'd1 && conv == 32'd0 ;

  // value method youtput1
  assign youtput1 = col0_3$downoutput ;
  assign RDY_youtput1 = RDY_youtput4 ;

  // value method youtput2
  assign youtput2 = col1_3$downoutput ;
  assign RDY_youtput2 = RDY_youtput4 ;

  // value method youtput3
  assign youtput3 = col2_3$downoutput ;
  assign RDY_youtput3 = RDY_youtput4 ;

  // value method youtput4
  assign youtput4 = col3_3$downoutput ;
  assign RDY_youtput4 = weighttrans == 32'd0 && conv == 32'd1 ;

  // action method weighttran
  assign RDY_weighttran = 1'd1 ;

  // action method convs
  assign RDY_convs = 1'd1 ;

  // submodule col0_0
  mkPE col0_0(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col0_0$leftinput_x),
	      .upinput_y(col0_0$upinput_y),
	      .weightinp_w(col0_0$weightinp_w),
	      .EN_upinput(col0_0$EN_upinput),
	      .EN_leftinput(col0_0$EN_leftinput),
	      .EN_weightinp(col0_0$EN_weightinp),
	      .rightoutput(),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col0_0$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col0_0$weightoutput),
	      .RDY_weightoutput());

  // submodule col0_1
  mkPE col0_1(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col0_1$leftinput_x),
	      .upinput_y(col0_1$upinput_y),
	      .weightinp_w(col0_1$weightinp_w),
	      .EN_upinput(col0_1$EN_upinput),
	      .EN_leftinput(col0_1$EN_leftinput),
	      .EN_weightinp(col0_1$EN_weightinp),
	      .rightoutput(col0_1$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col0_1$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col0_1$weightoutput),
	      .RDY_weightoutput());

  // submodule col0_2
  mkPE col0_2(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col0_2$leftinput_x),
	      .upinput_y(col0_2$upinput_y),
	      .weightinp_w(col0_2$weightinp_w),
	      .EN_upinput(col0_2$EN_upinput),
	      .EN_leftinput(col0_2$EN_leftinput),
	      .EN_weightinp(col0_2$EN_weightinp),
	      .rightoutput(col0_2$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col0_2$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col0_2$weightoutput),
	      .RDY_weightoutput());

  // submodule col0_3
  mkPE col0_3(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col0_3$leftinput_x),
	      .upinput_y(col0_3$upinput_y),
	      .weightinp_w(col0_3$weightinp_w),
	      .EN_upinput(col0_3$EN_upinput),
	      .EN_leftinput(col0_3$EN_leftinput),
	      .EN_weightinp(col0_3$EN_weightinp),
	      .rightoutput(col0_3$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col0_3$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col0_3$weightoutput),
	      .RDY_weightoutput());

  // submodule col1_0
  mkPE col1_0(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col1_0$leftinput_x),
	      .upinput_y(col1_0$upinput_y),
	      .weightinp_w(col1_0$weightinp_w),
	      .EN_upinput(col1_0$EN_upinput),
	      .EN_leftinput(col1_0$EN_leftinput),
	      .EN_weightinp(col1_0$EN_weightinp),
	      .rightoutput(col1_0$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col1_0$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col1_0$weightoutput),
	      .RDY_weightoutput());

  // submodule col1_1
  mkPE col1_1(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col1_1$leftinput_x),
	      .upinput_y(col1_1$upinput_y),
	      .weightinp_w(col1_1$weightinp_w),
	      .EN_upinput(col1_1$EN_upinput),
	      .EN_leftinput(col1_1$EN_leftinput),
	      .EN_weightinp(col1_1$EN_weightinp),
	      .rightoutput(col1_1$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col1_1$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col1_1$weightoutput),
	      .RDY_weightoutput());

  // submodule col1_2
  mkPE col1_2(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col1_2$leftinput_x),
	      .upinput_y(col1_2$upinput_y),
	      .weightinp_w(col1_2$weightinp_w),
	      .EN_upinput(col1_2$EN_upinput),
	      .EN_leftinput(col1_2$EN_leftinput),
	      .EN_weightinp(col1_2$EN_weightinp),
	      .rightoutput(col1_2$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col1_2$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col1_2$weightoutput),
	      .RDY_weightoutput());

  // submodule col1_3
  mkPE col1_3(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col1_3$leftinput_x),
	      .upinput_y(col1_3$upinput_y),
	      .weightinp_w(col1_3$weightinp_w),
	      .EN_upinput(col1_3$EN_upinput),
	      .EN_leftinput(col1_3$EN_leftinput),
	      .EN_weightinp(col1_3$EN_weightinp),
	      .rightoutput(),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col1_3$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col1_3$weightoutput),
	      .RDY_weightoutput());

  // submodule col2_0
  mkPE col2_0(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col2_0$leftinput_x),
	      .upinput_y(col2_0$upinput_y),
	      .weightinp_w(col2_0$weightinp_w),
	      .EN_upinput(col2_0$EN_upinput),
	      .EN_leftinput(col2_0$EN_leftinput),
	      .EN_weightinp(col2_0$EN_weightinp),
	      .rightoutput(col2_0$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col2_0$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col2_0$weightoutput),
	      .RDY_weightoutput());

  // submodule col2_1
  mkPE col2_1(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col2_1$leftinput_x),
	      .upinput_y(col2_1$upinput_y),
	      .weightinp_w(col2_1$weightinp_w),
	      .EN_upinput(col2_1$EN_upinput),
	      .EN_leftinput(col2_1$EN_leftinput),
	      .EN_weightinp(col2_1$EN_weightinp),
	      .rightoutput(col2_1$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col2_1$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col2_1$weightoutput),
	      .RDY_weightoutput());

  // submodule col2_2
  mkPE col2_2(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col2_2$leftinput_x),
	      .upinput_y(col2_2$upinput_y),
	      .weightinp_w(col2_2$weightinp_w),
	      .EN_upinput(col2_2$EN_upinput),
	      .EN_leftinput(col2_2$EN_leftinput),
	      .EN_weightinp(col2_2$EN_weightinp),
	      .rightoutput(col2_2$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col2_2$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col2_2$weightoutput),
	      .RDY_weightoutput());

  // submodule col2_3
  mkPE col2_3(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col2_3$leftinput_x),
	      .upinput_y(col2_3$upinput_y),
	      .weightinp_w(col2_3$weightinp_w),
	      .EN_upinput(col2_3$EN_upinput),
	      .EN_leftinput(col2_3$EN_leftinput),
	      .EN_weightinp(col2_3$EN_weightinp),
	      .rightoutput(),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col2_3$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col2_3$weightoutput),
	      .RDY_weightoutput());

  // submodule col3_0
  mkPE col3_0(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col3_0$leftinput_x),
	      .upinput_y(col3_0$upinput_y),
	      .weightinp_w(col3_0$weightinp_w),
	      .EN_upinput(col3_0$EN_upinput),
	      .EN_leftinput(col3_0$EN_leftinput),
	      .EN_weightinp(col3_0$EN_weightinp),
	      .rightoutput(col3_0$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col3_0$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(col3_0$weightoutput),
	      .RDY_weightoutput());

  // submodule col3_1
  mkPE col3_1(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col3_1$leftinput_x),
	      .upinput_y(col3_1$upinput_y),
	      .weightinp_w(col3_1$weightinp_w),
	      .EN_upinput(col3_1$EN_upinput),
	      .EN_leftinput(col3_1$EN_leftinput),
	      .EN_weightinp(col3_1$EN_weightinp),
	      .rightoutput(col3_1$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col3_1$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(),
	      .RDY_weightoutput());

  // submodule col3_2
  mkPE col3_2(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col3_2$leftinput_x),
	      .upinput_y(col3_2$upinput_y),
	      .weightinp_w(col3_2$weightinp_w),
	      .EN_upinput(col3_2$EN_upinput),
	      .EN_leftinput(col3_2$EN_leftinput),
	      .EN_weightinp(col3_2$EN_weightinp),
	      .rightoutput(col3_2$rightoutput),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col3_2$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(),
	      .RDY_weightoutput());

  // submodule col3_3
  mkPE col3_3(.CLK(CLK),
	      .RST_N(RST_N),
	      .leftinput_x(col3_3$leftinput_x),
	      .upinput_y(col3_3$upinput_y),
	      .weightinp_w(col3_3$weightinp_w),
	      .EN_upinput(col3_3$EN_upinput),
	      .EN_leftinput(col3_3$EN_leftinput),
	      .EN_weightinp(col3_3$EN_weightinp),
	      .rightoutput(),
	      .RDY_rightoutput(),
	      .RDY_upinput(),
	      .downoutput(col3_3$downoutput),
	      .RDY_downoutput(),
	      .RDY_leftinput(),
	      .RDY_weightinp(),
	      .weightoutput(),
	      .RDY_weightoutput());

  // register conv
  assign conv$D_IN = (convs_x == 32'd1) ? convs_x : 32'd0 ;
  assign conv$EN = EN_convs ;

  // register delay_0
  assign delay_0$D_IN = xinput5_x ;
  assign delay_0$EN = EN_xinput5 ;

  // register delay_1
  assign delay_1$D_IN = xinput6_x ;
  assign delay_1$EN = EN_xinput6 ;

  // register delay_2
  assign delay_2$D_IN = delay_1 ;
  assign delay_2$EN = RDY_youtput4 ;

  // register delay_3
  assign delay_3$D_IN = xinput7_x ;
  assign delay_3$EN = EN_xinput7 ;

  // register delay_4
  assign delay_4$D_IN = delay_3 ;
  assign delay_4$EN = RDY_youtput4 ;

  // register delay_5
  assign delay_5$D_IN = delay_4 ;
  assign delay_5$EN = RDY_youtput4 ;

  // register weighttrans
  assign weighttrans$D_IN = (weighttran_x == 32'd1) ? weighttran_x : 32'd0 ;
  assign weighttrans$EN = EN_weighttran ;

  // submodule col0_0
  assign col0_0$leftinput_x = xinput1_x ;
  assign col0_0$upinput_y = yinput1_x ;
  assign col0_0$weightinp_w = winput1_x ;
  assign col0_0$EN_upinput = EN_yinput1 ;
  assign col0_0$EN_leftinput = EN_xinput1 ;
  assign col0_0$EN_weightinp = EN_winput1 ;

  // submodule col0_1
  assign col0_1$leftinput_x = col1_0$rightoutput ;
  assign col0_1$upinput_y = col0_0$downoutput ;
  assign col0_1$weightinp_w = winput2_x ;
  assign col0_1$EN_upinput = RDY_youtput4 ;
  assign col0_1$EN_leftinput = RDY_youtput4 ;
  assign col0_1$EN_weightinp = EN_winput2 ;

  // submodule col0_2
  assign col0_2$leftinput_x = col1_1$rightoutput ;
  assign col0_2$upinput_y = col0_1$downoutput ;
  assign col0_2$weightinp_w = winput3_x ;
  assign col0_2$EN_upinput = RDY_youtput4 ;
  assign col0_2$EN_leftinput = RDY_youtput4 ;
  assign col0_2$EN_weightinp = EN_winput3 ;

  // submodule col0_3
  assign col0_3$leftinput_x = col1_2$rightoutput ;
  assign col0_3$upinput_y = col0_2$downoutput ;
  assign col0_3$weightinp_w = winput4_x ;
  assign col0_3$EN_upinput = RDY_youtput4 ;
  assign col0_3$EN_leftinput = RDY_youtput4 ;
  assign col0_3$EN_weightinp = EN_winput4 ;

  // submodule col1_0
  assign col1_0$leftinput_x = xinput2_x ;
  assign col1_0$upinput_y = yinput2_x ;
  assign col1_0$weightinp_w = col0_0$weightoutput ;
  assign col1_0$EN_upinput = EN_yinput2 ;
  assign col1_0$EN_leftinput = EN_xinput2 ;
  assign col1_0$EN_weightinp = RDY_winput4 ;

  // submodule col1_1
  assign col1_1$leftinput_x = col2_0$rightoutput ;
  assign col1_1$upinput_y = col1_0$downoutput ;
  assign col1_1$weightinp_w = col0_1$weightoutput ;
  assign col1_1$EN_upinput = RDY_youtput4 ;
  assign col1_1$EN_leftinput = RDY_youtput4 ;
  assign col1_1$EN_weightinp = RDY_winput4 ;

  // submodule col1_2
  assign col1_2$leftinput_x = col2_1$rightoutput ;
  assign col1_2$upinput_y = col1_1$downoutput ;
  assign col1_2$weightinp_w = col0_2$weightoutput ;
  assign col1_2$EN_upinput = RDY_youtput4 ;
  assign col1_2$EN_leftinput = RDY_youtput4 ;
  assign col1_2$EN_weightinp = RDY_winput4 ;

  // submodule col1_3
  assign col1_3$leftinput_x = col2_2$rightoutput ;
  assign col1_3$upinput_y = col1_2$downoutput ;
  assign col1_3$weightinp_w = col0_3$weightoutput ;
  assign col1_3$EN_upinput = RDY_youtput4 ;
  assign col1_3$EN_leftinput = RDY_youtput4 ;
  assign col1_3$EN_weightinp = RDY_winput4 ;

  // submodule col2_0
  assign col2_0$leftinput_x = xinput3_x ;
  assign col2_0$upinput_y = yinput3_x ;
  assign col2_0$weightinp_w = col1_0$weightoutput ;
  assign col2_0$EN_upinput = EN_yinput3 ;
  assign col2_0$EN_leftinput = EN_xinput3 ;
  assign col2_0$EN_weightinp = RDY_winput4 ;

  // submodule col2_1
  assign col2_1$leftinput_x = col3_0$rightoutput ;
  assign col2_1$upinput_y = col2_0$downoutput ;
  assign col2_1$weightinp_w = col1_1$weightoutput ;
  assign col2_1$EN_upinput = RDY_youtput4 ;
  assign col2_1$EN_leftinput = RDY_youtput4 ;
  assign col2_1$EN_weightinp = RDY_winput4 ;

  // submodule col2_2
  assign col2_2$leftinput_x = col3_1$rightoutput ;
  assign col2_2$upinput_y = col2_1$downoutput ;
  assign col2_2$weightinp_w = col1_2$weightoutput ;
  assign col2_2$EN_upinput = RDY_youtput4 ;
  assign col2_2$EN_leftinput = RDY_youtput4 ;
  assign col2_2$EN_weightinp = RDY_winput4 ;

  // submodule col2_3
  assign col2_3$leftinput_x = col3_2$rightoutput ;
  assign col2_3$upinput_y = col2_2$downoutput ;
  assign col2_3$weightinp_w = col1_3$weightoutput ;
  assign col2_3$EN_upinput = RDY_youtput4 ;
  assign col2_3$EN_leftinput = RDY_youtput4 ;
  assign col2_3$EN_weightinp = RDY_winput4 ;

  // submodule col3_0
  assign col3_0$leftinput_x = xinput4_x ;
  assign col3_0$upinput_y = yinput4_x ;
  assign col3_0$weightinp_w = col2_0$weightoutput ;
  assign col3_0$EN_upinput = EN_yinput4 ;
  assign col3_0$EN_leftinput = EN_xinput4 ;
  assign col3_0$EN_weightinp = RDY_winput4 ;

  // submodule col3_1
  assign col3_1$leftinput_x = delay_0 ;
  assign col3_1$upinput_y = col3_0$downoutput ;
  assign col3_1$weightinp_w = col2_1$weightoutput ;
  assign col3_1$EN_upinput = RDY_youtput4 ;
  assign col3_1$EN_leftinput = RDY_youtput4 ;
  assign col3_1$EN_weightinp = RDY_winput4 ;

  // submodule col3_2
  assign col3_2$leftinput_x = delay_2 ;
  assign col3_2$upinput_y = col3_1$downoutput ;
  assign col3_2$weightinp_w = col2_2$weightoutput ;
  assign col3_2$EN_upinput = RDY_youtput4 ;
  assign col3_2$EN_leftinput = RDY_youtput4 ;
  assign col3_2$EN_weightinp = RDY_winput4 ;

  // submodule col3_3
  assign col3_3$leftinput_x = delay_5 ;
  assign col3_3$upinput_y = col3_2$downoutput ;
  assign col3_3$weightinp_w = col2_3$weightoutput ;
  assign col3_3$EN_upinput = RDY_youtput4 ;
  assign col3_3$EN_leftinput = RDY_youtput4 ;
  assign col3_3$EN_weightinp = RDY_winput4 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        conv <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weighttrans <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (conv$EN) conv <= `BSV_ASSIGNMENT_DELAY conv$D_IN;
	if (weighttrans$EN)
	  weighttrans <= `BSV_ASSIGNMENT_DELAY weighttrans$D_IN;
      end
    if (delay_0$EN) delay_0 <= `BSV_ASSIGNMENT_DELAY delay_0$D_IN;
    if (delay_1$EN) delay_1 <= `BSV_ASSIGNMENT_DELAY delay_1$D_IN;
    if (delay_2$EN) delay_2 <= `BSV_ASSIGNMENT_DELAY delay_2$D_IN;
    if (delay_3$EN) delay_3 <= `BSV_ASSIGNMENT_DELAY delay_3$D_IN;
    if (delay_4$EN) delay_4 <= `BSV_ASSIGNMENT_DELAY delay_4$D_IN;
    if (delay_5$EN) delay_5 <= `BSV_ASSIGNMENT_DELAY delay_5$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    conv = 32'hAAAAAAAA;
    delay_0 = 32'hAAAAAAAA;
    delay_1 = 32'hAAAAAAAA;
    delay_2 = 32'hAAAAAAAA;
    delay_3 = 32'hAAAAAAAA;
    delay_4 = 32'hAAAAAAAA;
    delay_5 = 32'hAAAAAAAA;
    weighttrans = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xinput1)
	begin
	  v__h6470 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xinput1) $display("%t xinput1: %0d", v__h6470, xinput1_x);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h2714 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t xcon2 x:%0d array[0][1]: %0d",
		 v__h2714,
		 col1_0$rightoutput,
		 col0_1$rightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xinput2)
	begin
	  v__h6562 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xinput2) $display("%t xinput2: %0d", v__h6562, xinput2_x);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h3041 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t xcon3 x:%0d array[1][1]: %0d",
		 v__h3041,
		 col2_0$rightoutput,
		 col1_1$rightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h3089 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t xcon3 y:%0d array[0][2]: %0d",
		 v__h3089,
		 col1_1$rightoutput,
		 col0_2$rightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xinput3)
	begin
	  v__h6654 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xinput3) $display("%t xinput3: %0d", v__h6654, xinput3_x);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h3484 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t xcon4 x:%0d array[2][1]: %0d",
		 v__h3484,
		 col3_0$rightoutput,
		 col2_1$rightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h3541 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t xcon4 y:%0d array[1][2]: %0d",
		 v__h3541,
		 col2_1$rightoutput,
		 col1_2$rightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h3589 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t xcon4 z:%0d array[0][3]: %0d",
		 v__h3589,
		 col1_2$rightoutput,
		 col0_3$rightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_winput4)
	begin
	  v__h4389 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_winput4)
	$display("%t wcon x:%0d array[1][0]: %0d",
		 v__h4389,
		 col0_0$weightoutput,
		 col1_0$weightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_winput4)
	begin
	  v__h4512 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_winput4)
	$display("%t wcon y:%0d array[2][0]: %0d",
		 v__h4512,
		 col1_0$weightoutput,
		 col2_0$weightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_winput4)
	begin
	  v__h4626 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_winput4)
	$display("%t wcon z:%0d array[3][0]: %0d",
		 v__h4626,
		 col2_0$weightoutput,
		 col3_0$weightoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h5465 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t ycon1 x:%0d array[0][1]: %0d",
		 v__h5465,
		 col0_0$downoutput,
		 col0_1$downoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h5522 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t ycon1 y:%0d array[0][2]: %0d",
		 v__h5522,
		 col0_1$downoutput,
		 col0_2$downoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h5570 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t ycon1 z:%0d array[0][3]: %0d",
		 v__h5570,
		 col0_2$downoutput,
		 col0_3$downoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h5833 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t ycon2 x:%0d array[1][1]: %0d",
		 v__h5833,
		 col1_0$downoutput,
		 col1_1$downoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h5890 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t ycon2 y:%0d array[1][2]: %0d",
		 v__h5890,
		 col1_1$downoutput,
		 col1_2$downoutput);
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	begin
	  v__h5938 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (RDY_youtput4)
	$display("%t ycon2 z:%0d array[1][3]: %0d",
		 v__h5938,
		 col1_2$downoutput,
		 col1_3$downoutput);
  end
  // synopsys translate_on
endmodule  // mkPEArray

