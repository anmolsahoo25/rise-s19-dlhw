//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Thu Jun 27 15:11:58 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_xfifoin1                   O     1
// RDY_xfifoin2                   O     1
// RDY_xfifoin3                   O     1
// RDY_xfifoin4                   O     1
// RDY_xfifoin5                   O     1
// RDY_xfifoin6                   O     1
// RDY_xfifoin7                   O     1
// RDY_yfifoin1                   O     1
// RDY_yfifoin2                   O     1
// RDY_yfifoin3                   O     1
// RDY_yfifoin4                   O     1
// yfifoout1                      O    32 reg
// RDY_yfifoout1                  O     1
// yfifoout2                      O    32 reg
// RDY_yfifoout2                  O     1
// yfifoout3                      O    32 reg
// RDY_yfifoout3                  O     1
// yfifoout4                      O    32 reg
// RDY_yfifoout4                  O     1
// RDY_wfifoin1                   O     1
// RDY_wfifoin2                   O     1
// RDY_wfifoin3                   O     1
// RDY_wfifoin4                   O     1
// RDY_tr_inputfifo               O     1 const
// RDY_tr_outfifo                 O     1 const
// RDY_tr_weightfifo              O     1 const
// RDY_tr_weigh                   O     1 const
// RDY_tr_conv                    O     1 const
// tr_convout                     O    32 reg
// RDY_tr_convout                 O     1 const
// RDY_pearray_xinput1            O     1
// RDY_pearray_xinput2            O     1
// RDY_pearray_xinput3            O     1
// RDY_pearray_xinput4            O     1
// RDY_pearray_xinput5            O     1
// RDY_pearray_xinput6            O     1
// RDY_pearray_xinput7            O     1
// RDY_pearray_yinput1            O     1
// RDY_pearray_yinput2            O     1
// RDY_pearray_yinput3            O     1
// RDY_pearray_yinput4            O     1
// RDY_pearray_winput1            O     1
// RDY_pearray_winput2            O     1
// RDY_pearray_winput3            O     1
// RDY_pearray_winput4            O     1
// pearray_youtput1               O    32
// RDY_pearray_youtput1           O     1
// pearray_youtput2               O    32
// RDY_pearray_youtput2           O     1
// pearray_youtput3               O    32
// RDY_pearray_youtput3           O     1
// pearray_youtput4               O    32
// RDY_pearray_youtput4           O     1
// RDY_pearray_weighttran         O     1 const
// RDY_pearray_convs              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// xfifoin1_x                     I    32 reg
// xfifoin2_x                     I    32 reg
// xfifoin3_x                     I    32 reg
// xfifoin4_x                     I    32 reg
// xfifoin5_x                     I    32 reg
// xfifoin6_x                     I    32 reg
// xfifoin7_x                     I    32 reg
// yfifoin1_x                     I    32 reg
// yfifoin2_x                     I    32 reg
// yfifoin3_x                     I    32 reg
// yfifoin4_x                     I    32 reg
// wfifoin1_x                     I    32 reg
// wfifoin2_x                     I    32 reg
// wfifoin3_x                     I    32 reg
// wfifoin4_x                     I    32 reg
// tr_inputfifo_x                 I    32
// tr_outfifo_x                   I    32
// tr_weightfifo_x                I    32
// tr_weigh_x                     I    32
// tr_conv_x                      I    32
// pearray_xinput1_x              I    32
// pearray_xinput2_x              I    32
// pearray_xinput3_x              I    32
// pearray_xinput4_x              I    32
// pearray_xinput5_x              I    32
// pearray_xinput6_x              I    32
// pearray_xinput7_x              I    32
// pearray_yinput1_x              I    32
// pearray_yinput2_x              I    32
// pearray_yinput3_x              I    32
// pearray_yinput4_x              I    32
// pearray_winput1_x              I    32
// pearray_winput2_x              I    32
// pearray_winput3_x              I    32
// pearray_winput4_x              I    32
// pearray_weighttran_x           I    32
// pearray_convs_x                I    32
// EN_xfifoin1                    I     1
// EN_xfifoin2                    I     1
// EN_xfifoin3                    I     1
// EN_xfifoin4                    I     1
// EN_xfifoin5                    I     1
// EN_xfifoin6                    I     1
// EN_xfifoin7                    I     1
// EN_yfifoin1                    I     1
// EN_yfifoin2                    I     1
// EN_yfifoin3                    I     1
// EN_yfifoin4                    I     1
// EN_wfifoin1                    I     1
// EN_wfifoin2                    I     1
// EN_wfifoin3                    I     1
// EN_wfifoin4                    I     1
// EN_tr_inputfifo                I     1
// EN_tr_outfifo                  I     1
// EN_tr_weightfifo               I     1
// EN_tr_weigh                    I     1
// EN_tr_conv                     I     1
// EN_pearray_xinput1             I     1
// EN_pearray_xinput2             I     1
// EN_pearray_xinput3             I     1
// EN_pearray_xinput4             I     1
// EN_pearray_xinput5             I     1
// EN_pearray_xinput6             I     1
// EN_pearray_xinput7             I     1
// EN_pearray_yinput1             I     1
// EN_pearray_yinput2             I     1
// EN_pearray_yinput3             I     1
// EN_pearray_yinput4             I     1
// EN_pearray_winput1             I     1
// EN_pearray_winput2             I     1
// EN_pearray_winput3             I     1
// EN_pearray_winput4             I     1
// EN_pearray_weighttran          I     1
// EN_pearray_convs               I     1
// EN_yfifoout1                   I     1
// EN_yfifoout2                   I     1
// EN_yfifoout3                   I     1
// EN_yfifoout4                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPEFifo(CLK,
		RST_N,

		xfifoin1_x,
		EN_xfifoin1,
		RDY_xfifoin1,

		xfifoin2_x,
		EN_xfifoin2,
		RDY_xfifoin2,

		xfifoin3_x,
		EN_xfifoin3,
		RDY_xfifoin3,

		xfifoin4_x,
		EN_xfifoin4,
		RDY_xfifoin4,

		xfifoin5_x,
		EN_xfifoin5,
		RDY_xfifoin5,

		xfifoin6_x,
		EN_xfifoin6,
		RDY_xfifoin6,

		xfifoin7_x,
		EN_xfifoin7,
		RDY_xfifoin7,

		yfifoin1_x,
		EN_yfifoin1,
		RDY_yfifoin1,

		yfifoin2_x,
		EN_yfifoin2,
		RDY_yfifoin2,

		yfifoin3_x,
		EN_yfifoin3,
		RDY_yfifoin3,

		yfifoin4_x,
		EN_yfifoin4,
		RDY_yfifoin4,

		EN_yfifoout1,
		yfifoout1,
		RDY_yfifoout1,

		EN_yfifoout2,
		yfifoout2,
		RDY_yfifoout2,

		EN_yfifoout3,
		yfifoout3,
		RDY_yfifoout3,

		EN_yfifoout4,
		yfifoout4,
		RDY_yfifoout4,

		wfifoin1_x,
		EN_wfifoin1,
		RDY_wfifoin1,

		wfifoin2_x,
		EN_wfifoin2,
		RDY_wfifoin2,

		wfifoin3_x,
		EN_wfifoin3,
		RDY_wfifoin3,

		wfifoin4_x,
		EN_wfifoin4,
		RDY_wfifoin4,

		tr_inputfifo_x,
		EN_tr_inputfifo,
		RDY_tr_inputfifo,

		tr_outfifo_x,
		EN_tr_outfifo,
		RDY_tr_outfifo,

		tr_weightfifo_x,
		EN_tr_weightfifo,
		RDY_tr_weightfifo,

		tr_weigh_x,
		EN_tr_weigh,
		RDY_tr_weigh,

		tr_conv_x,
		EN_tr_conv,
		RDY_tr_conv,

		tr_convout,
		RDY_tr_convout,

		pearray_xinput1_x,
		EN_pearray_xinput1,
		RDY_pearray_xinput1,

		pearray_xinput2_x,
		EN_pearray_xinput2,
		RDY_pearray_xinput2,

		pearray_xinput3_x,
		EN_pearray_xinput3,
		RDY_pearray_xinput3,

		pearray_xinput4_x,
		EN_pearray_xinput4,
		RDY_pearray_xinput4,

		pearray_xinput5_x,
		EN_pearray_xinput5,
		RDY_pearray_xinput5,

		pearray_xinput6_x,
		EN_pearray_xinput6,
		RDY_pearray_xinput6,

		pearray_xinput7_x,
		EN_pearray_xinput7,
		RDY_pearray_xinput7,

		pearray_yinput1_x,
		EN_pearray_yinput1,
		RDY_pearray_yinput1,

		pearray_yinput2_x,
		EN_pearray_yinput2,
		RDY_pearray_yinput2,

		pearray_yinput3_x,
		EN_pearray_yinput3,
		RDY_pearray_yinput3,

		pearray_yinput4_x,
		EN_pearray_yinput4,
		RDY_pearray_yinput4,

		pearray_winput1_x,
		EN_pearray_winput1,
		RDY_pearray_winput1,

		pearray_winput2_x,
		EN_pearray_winput2,
		RDY_pearray_winput2,

		pearray_winput3_x,
		EN_pearray_winput3,
		RDY_pearray_winput3,

		pearray_winput4_x,
		EN_pearray_winput4,
		RDY_pearray_winput4,

		pearray_youtput1,
		RDY_pearray_youtput1,

		pearray_youtput2,
		RDY_pearray_youtput2,

		pearray_youtput3,
		RDY_pearray_youtput3,

		pearray_youtput4,
		RDY_pearray_youtput4,

		pearray_weighttran_x,
		EN_pearray_weighttran,
		RDY_pearray_weighttran,

		pearray_convs_x,
		EN_pearray_convs,
		RDY_pearray_convs);
  input  CLK;
  input  RST_N;

  // action method xfifoin1
  input  [31 : 0] xfifoin1_x;
  input  EN_xfifoin1;
  output RDY_xfifoin1;

  // action method xfifoin2
  input  [31 : 0] xfifoin2_x;
  input  EN_xfifoin2;
  output RDY_xfifoin2;

  // action method xfifoin3
  input  [31 : 0] xfifoin3_x;
  input  EN_xfifoin3;
  output RDY_xfifoin3;

  // action method xfifoin4
  input  [31 : 0] xfifoin4_x;
  input  EN_xfifoin4;
  output RDY_xfifoin4;

  // action method xfifoin5
  input  [31 : 0] xfifoin5_x;
  input  EN_xfifoin5;
  output RDY_xfifoin5;

  // action method xfifoin6
  input  [31 : 0] xfifoin6_x;
  input  EN_xfifoin6;
  output RDY_xfifoin6;

  // action method xfifoin7
  input  [31 : 0] xfifoin7_x;
  input  EN_xfifoin7;
  output RDY_xfifoin7;

  // action method yfifoin1
  input  [31 : 0] yfifoin1_x;
  input  EN_yfifoin1;
  output RDY_yfifoin1;

  // action method yfifoin2
  input  [31 : 0] yfifoin2_x;
  input  EN_yfifoin2;
  output RDY_yfifoin2;

  // action method yfifoin3
  input  [31 : 0] yfifoin3_x;
  input  EN_yfifoin3;
  output RDY_yfifoin3;

  // action method yfifoin4
  input  [31 : 0] yfifoin4_x;
  input  EN_yfifoin4;
  output RDY_yfifoin4;

  // actionvalue method yfifoout1
  input  EN_yfifoout1;
  output [31 : 0] yfifoout1;
  output RDY_yfifoout1;

  // actionvalue method yfifoout2
  input  EN_yfifoout2;
  output [31 : 0] yfifoout2;
  output RDY_yfifoout2;

  // actionvalue method yfifoout3
  input  EN_yfifoout3;
  output [31 : 0] yfifoout3;
  output RDY_yfifoout3;

  // actionvalue method yfifoout4
  input  EN_yfifoout4;
  output [31 : 0] yfifoout4;
  output RDY_yfifoout4;

  // action method wfifoin1
  input  [31 : 0] wfifoin1_x;
  input  EN_wfifoin1;
  output RDY_wfifoin1;

  // action method wfifoin2
  input  [31 : 0] wfifoin2_x;
  input  EN_wfifoin2;
  output RDY_wfifoin2;

  // action method wfifoin3
  input  [31 : 0] wfifoin3_x;
  input  EN_wfifoin3;
  output RDY_wfifoin3;

  // action method wfifoin4
  input  [31 : 0] wfifoin4_x;
  input  EN_wfifoin4;
  output RDY_wfifoin4;

  // action method tr_inputfifo
  input  [31 : 0] tr_inputfifo_x;
  input  EN_tr_inputfifo;
  output RDY_tr_inputfifo;

  // action method tr_outfifo
  input  [31 : 0] tr_outfifo_x;
  input  EN_tr_outfifo;
  output RDY_tr_outfifo;

  // action method tr_weightfifo
  input  [31 : 0] tr_weightfifo_x;
  input  EN_tr_weightfifo;
  output RDY_tr_weightfifo;

  // action method tr_weigh
  input  [31 : 0] tr_weigh_x;
  input  EN_tr_weigh;
  output RDY_tr_weigh;

  // action method tr_conv
  input  [31 : 0] tr_conv_x;
  input  EN_tr_conv;
  output RDY_tr_conv;

  // value method tr_convout
  output [31 : 0] tr_convout;
  output RDY_tr_convout;

  // action method pearray_xinput1
  input  [31 : 0] pearray_xinput1_x;
  input  EN_pearray_xinput1;
  output RDY_pearray_xinput1;

  // action method pearray_xinput2
  input  [31 : 0] pearray_xinput2_x;
  input  EN_pearray_xinput2;
  output RDY_pearray_xinput2;

  // action method pearray_xinput3
  input  [31 : 0] pearray_xinput3_x;
  input  EN_pearray_xinput3;
  output RDY_pearray_xinput3;

  // action method pearray_xinput4
  input  [31 : 0] pearray_xinput4_x;
  input  EN_pearray_xinput4;
  output RDY_pearray_xinput4;

  // action method pearray_xinput5
  input  [31 : 0] pearray_xinput5_x;
  input  EN_pearray_xinput5;
  output RDY_pearray_xinput5;

  // action method pearray_xinput6
  input  [31 : 0] pearray_xinput6_x;
  input  EN_pearray_xinput6;
  output RDY_pearray_xinput6;

  // action method pearray_xinput7
  input  [31 : 0] pearray_xinput7_x;
  input  EN_pearray_xinput7;
  output RDY_pearray_xinput7;

  // action method pearray_yinput1
  input  [31 : 0] pearray_yinput1_x;
  input  EN_pearray_yinput1;
  output RDY_pearray_yinput1;

  // action method pearray_yinput2
  input  [31 : 0] pearray_yinput2_x;
  input  EN_pearray_yinput2;
  output RDY_pearray_yinput2;

  // action method pearray_yinput3
  input  [31 : 0] pearray_yinput3_x;
  input  EN_pearray_yinput3;
  output RDY_pearray_yinput3;

  // action method pearray_yinput4
  input  [31 : 0] pearray_yinput4_x;
  input  EN_pearray_yinput4;
  output RDY_pearray_yinput4;

  // action method pearray_winput1
  input  [31 : 0] pearray_winput1_x;
  input  EN_pearray_winput1;
  output RDY_pearray_winput1;

  // action method pearray_winput2
  input  [31 : 0] pearray_winput2_x;
  input  EN_pearray_winput2;
  output RDY_pearray_winput2;

  // action method pearray_winput3
  input  [31 : 0] pearray_winput3_x;
  input  EN_pearray_winput3;
  output RDY_pearray_winput3;

  // action method pearray_winput4
  input  [31 : 0] pearray_winput4_x;
  input  EN_pearray_winput4;
  output RDY_pearray_winput4;

  // value method pearray_youtput1
  output [31 : 0] pearray_youtput1;
  output RDY_pearray_youtput1;

  // value method pearray_youtput2
  output [31 : 0] pearray_youtput2;
  output RDY_pearray_youtput2;

  // value method pearray_youtput3
  output [31 : 0] pearray_youtput3;
  output RDY_pearray_youtput3;

  // value method pearray_youtput4
  output [31 : 0] pearray_youtput4;
  output RDY_pearray_youtput4;

  // action method pearray_weighttran
  input  [31 : 0] pearray_weighttran_x;
  input  EN_pearray_weighttran;
  output RDY_pearray_weighttran;

  // action method pearray_convs
  input  [31 : 0] pearray_convs_x;
  input  EN_pearray_convs;
  output RDY_pearray_convs;

  // signals for module outputs
  wire [31 : 0] pearray_youtput1,
		pearray_youtput2,
		pearray_youtput3,
		pearray_youtput4,
		tr_convout,
		yfifoout1,
		yfifoout2,
		yfifoout3,
		yfifoout4;
  wire RDY_pearray_convs,
       RDY_pearray_weighttran,
       RDY_pearray_winput1,
       RDY_pearray_winput2,
       RDY_pearray_winput3,
       RDY_pearray_winput4,
       RDY_pearray_xinput1,
       RDY_pearray_xinput2,
       RDY_pearray_xinput3,
       RDY_pearray_xinput4,
       RDY_pearray_xinput5,
       RDY_pearray_xinput6,
       RDY_pearray_xinput7,
       RDY_pearray_yinput1,
       RDY_pearray_yinput2,
       RDY_pearray_yinput3,
       RDY_pearray_yinput4,
       RDY_pearray_youtput1,
       RDY_pearray_youtput2,
       RDY_pearray_youtput3,
       RDY_pearray_youtput4,
       RDY_tr_conv,
       RDY_tr_convout,
       RDY_tr_inputfifo,
       RDY_tr_outfifo,
       RDY_tr_weigh,
       RDY_tr_weightfifo,
       RDY_wfifoin1,
       RDY_wfifoin2,
       RDY_wfifoin3,
       RDY_wfifoin4,
       RDY_xfifoin1,
       RDY_xfifoin2,
       RDY_xfifoin3,
       RDY_xfifoin4,
       RDY_xfifoin5,
       RDY_xfifoin6,
       RDY_xfifoin7,
       RDY_yfifoin1,
       RDY_yfifoin2,
       RDY_yfifoin3,
       RDY_yfifoin4,
       RDY_yfifoout1,
       RDY_yfifoout2,
       RDY_yfifoout3,
       RDY_yfifoout4;

  // register con
  reg [31 : 0] con;
  wire [31 : 0] con$D_IN;
  wire con$EN;

  // register conout
  reg [31 : 0] conout;
  wire [31 : 0] conout$D_IN;
  wire conout$EN;

  // register counter
  reg [31 : 0] counter;
  wire [31 : 0] counter$D_IN;
  wire counter$EN;

  // register counter2
  reg [31 : 0] counter2;
  wire [31 : 0] counter2$D_IN;
  wire counter2$EN;

  // register inputfifo
  reg [31 : 0] inputfifo;
  wire [31 : 0] inputfifo$D_IN;
  wire inputfifo$EN;

  // register outfifo
  reg [31 : 0] outfifo;
  wire [31 : 0] outfifo$D_IN;
  wire outfifo$EN;

  // register weigh
  reg [31 : 0] weigh;
  wire [31 : 0] weigh$D_IN;
  wire weigh$EN;

  // register weightfifo
  reg [31 : 0] weightfifo;
  wire [31 : 0] weightfifo$D_IN;
  wire weightfifo$EN;

  // ports of submodule fifow1
  wire [31 : 0] fifow1$D_IN, fifow1$D_OUT;
  wire fifow1$CLR, fifow1$DEQ, fifow1$EMPTY_N, fifow1$ENQ, fifow1$FULL_N;

  // ports of submodule fifow2
  wire [31 : 0] fifow2$D_IN, fifow2$D_OUT;
  wire fifow2$CLR, fifow2$DEQ, fifow2$EMPTY_N, fifow2$ENQ, fifow2$FULL_N;

  // ports of submodule fifow3
  wire [31 : 0] fifow3$D_IN, fifow3$D_OUT;
  wire fifow3$CLR, fifow3$DEQ, fifow3$EMPTY_N, fifow3$ENQ, fifow3$FULL_N;

  // ports of submodule fifow4
  wire [31 : 0] fifow4$D_IN, fifow4$D_OUT;
  wire fifow4$CLR, fifow4$DEQ, fifow4$EMPTY_N, fifow4$ENQ, fifow4$FULL_N;

  // ports of submodule fifox1
  wire [31 : 0] fifox1$D_IN, fifox1$D_OUT;
  wire fifox1$CLR, fifox1$DEQ, fifox1$EMPTY_N, fifox1$ENQ, fifox1$FULL_N;

  // ports of submodule fifox2
  wire [31 : 0] fifox2$D_IN, fifox2$D_OUT;
  wire fifox2$CLR, fifox2$DEQ, fifox2$EMPTY_N, fifox2$ENQ, fifox2$FULL_N;

  // ports of submodule fifox3
  wire [31 : 0] fifox3$D_IN, fifox3$D_OUT;
  wire fifox3$CLR, fifox3$DEQ, fifox3$EMPTY_N, fifox3$ENQ, fifox3$FULL_N;

  // ports of submodule fifox4
  wire [31 : 0] fifox4$D_IN, fifox4$D_OUT;
  wire fifox4$CLR, fifox4$DEQ, fifox4$EMPTY_N, fifox4$ENQ, fifox4$FULL_N;

  // ports of submodule fifox5
  wire [31 : 0] fifox5$D_IN, fifox5$D_OUT;
  wire fifox5$CLR, fifox5$DEQ, fifox5$EMPTY_N, fifox5$ENQ, fifox5$FULL_N;

  // ports of submodule fifox6
  wire [31 : 0] fifox6$D_IN, fifox6$D_OUT;
  wire fifox6$CLR, fifox6$DEQ, fifox6$EMPTY_N, fifox6$ENQ, fifox6$FULL_N;

  // ports of submodule fifox7
  wire [31 : 0] fifox7$D_IN, fifox7$D_OUT;
  wire fifox7$CLR, fifox7$DEQ, fifox7$EMPTY_N, fifox7$ENQ, fifox7$FULL_N;

  // ports of submodule fifoy1
  wire [31 : 0] fifoy1$D_IN, fifoy1$D_OUT;
  wire fifoy1$CLR, fifoy1$DEQ, fifoy1$EMPTY_N, fifoy1$ENQ, fifoy1$FULL_N;

  // ports of submodule fifoy2
  wire [31 : 0] fifoy2$D_IN, fifoy2$D_OUT;
  wire fifoy2$CLR, fifoy2$DEQ, fifoy2$EMPTY_N, fifoy2$ENQ, fifoy2$FULL_N;

  // ports of submodule fifoy3
  wire [31 : 0] fifoy3$D_IN, fifoy3$D_OUT;
  wire fifoy3$CLR, fifoy3$DEQ, fifoy3$EMPTY_N, fifoy3$ENQ, fifoy3$FULL_N;

  // ports of submodule fifoy4
  wire [31 : 0] fifoy4$D_IN, fifoy4$D_OUT;
  wire fifoy4$CLR, fifoy4$DEQ, fifoy4$EMPTY_N, fifoy4$ENQ, fifoy4$FULL_N;

  // ports of submodule fifoyin1
  wire [31 : 0] fifoyin1$D_IN, fifoyin1$D_OUT;
  wire fifoyin1$CLR,
       fifoyin1$DEQ,
       fifoyin1$EMPTY_N,
       fifoyin1$ENQ,
       fifoyin1$FULL_N;

  // ports of submodule fifoyin2
  wire [31 : 0] fifoyin2$D_IN, fifoyin2$D_OUT;
  wire fifoyin2$CLR,
       fifoyin2$DEQ,
       fifoyin2$EMPTY_N,
       fifoyin2$ENQ,
       fifoyin2$FULL_N;

  // ports of submodule fifoyin3
  wire [31 : 0] fifoyin3$D_IN, fifoyin3$D_OUT;
  wire fifoyin3$CLR,
       fifoyin3$DEQ,
       fifoyin3$EMPTY_N,
       fifoyin3$ENQ,
       fifoyin3$FULL_N;

  // ports of submodule fifoyin4
  wire [31 : 0] fifoyin4$D_IN, fifoyin4$D_OUT;
  wire fifoyin4$CLR,
       fifoyin4$DEQ,
       fifoyin4$EMPTY_N,
       fifoyin4$ENQ,
       fifoyin4$FULL_N;

  // ports of submodule pearr
  wire [31 : 0] pearr$convs_x,
		pearr$weighttran_x,
		pearr$winput1_x,
		pearr$winput2_x,
		pearr$winput3_x,
		pearr$winput4_x,
		pearr$xinput1_x,
		pearr$xinput2_x,
		pearr$xinput3_x,
		pearr$xinput4_x,
		pearr$xinput5_x,
		pearr$xinput6_x,
		pearr$xinput7_x,
		pearr$yinput1_x,
		pearr$yinput2_x,
		pearr$yinput3_x,
		pearr$yinput4_x,
		pearr$youtput1,
		pearr$youtput2,
		pearr$youtput3,
		pearr$youtput4;
  wire pearr$EN_convs,
       pearr$EN_weighttran,
       pearr$EN_winput1,
       pearr$EN_winput2,
       pearr$EN_winput3,
       pearr$EN_winput4,
       pearr$EN_xinput1,
       pearr$EN_xinput2,
       pearr$EN_xinput3,
       pearr$EN_xinput4,
       pearr$EN_xinput5,
       pearr$EN_xinput6,
       pearr$EN_xinput7,
       pearr$EN_yinput1,
       pearr$EN_yinput2,
       pearr$EN_yinput3,
       pearr$EN_yinput4,
       pearr$RDY_winput1,
       pearr$RDY_winput2,
       pearr$RDY_winput3,
       pearr$RDY_winput4,
       pearr$RDY_xinput1,
       pearr$RDY_xinput2,
       pearr$RDY_xinput3,
       pearr$RDY_xinput4,
       pearr$RDY_xinput5,
       pearr$RDY_xinput6,
       pearr$RDY_xinput7,
       pearr$RDY_yinput1,
       pearr$RDY_yinput2,
       pearr$RDY_yinput3,
       pearr$RDY_yinput4,
       pearr$RDY_youtput1,
       pearr$RDY_youtput2,
       pearr$RDY_youtput3,
       pearr$RDY_youtput4;

  // rule scheduling signals
  wire WILL_FIRE_RL_rl_conout_end,
       WILL_FIRE_RL_rl_winput1,
       WILL_FIRE_RL_rl_winput2,
       WILL_FIRE_RL_rl_winput3,
       WILL_FIRE_RL_rl_winput4,
       WILL_FIRE_RL_rl_xinput1,
       WILL_FIRE_RL_rl_xinput2,
       WILL_FIRE_RL_rl_xinput3,
       WILL_FIRE_RL_rl_xinput4,
       WILL_FIRE_RL_rl_xinput5,
       WILL_FIRE_RL_rl_xinput6,
       WILL_FIRE_RL_rl_xinput7,
       WILL_FIRE_RL_rl_yinput1,
       WILL_FIRE_RL_rl_yinput2,
       WILL_FIRE_RL_rl_yinput3,
       WILL_FIRE_RL_rl_yinput4,
       WILL_FIRE_RL_rl_youtput1,
       WILL_FIRE_RL_rl_youtput2;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_counter$write_1__VAL_2, MUX_counter2$write_1__VAL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h3607;
  reg [63 : 0] v__h3763;
  reg [63 : 0] v__h3907;
  reg [63 : 0] v__h3987;
  reg [63 : 0] v__h4067;
  reg [63 : 0] v__h4147;
  reg [63 : 0] v__h2386;
  reg [63 : 0] v__h2757;
  reg [63 : 0] v__h3061;
  reg [63 : 0] v__h3293;
  reg [63 : 0] v__h3340;
  // synopsys translate_on

  // action method xfifoin1
  assign RDY_xfifoin1 = inputfifo == 32'd1 && fifox1$FULL_N ;

  // action method xfifoin2
  assign RDY_xfifoin2 = inputfifo == 32'd1 && fifox2$FULL_N ;

  // action method xfifoin3
  assign RDY_xfifoin3 = inputfifo == 32'd1 && fifox3$FULL_N ;

  // action method xfifoin4
  assign RDY_xfifoin4 = inputfifo == 32'd1 && fifox4$FULL_N ;

  // action method xfifoin5
  assign RDY_xfifoin5 = inputfifo == 32'd1 && fifox5$FULL_N ;

  // action method xfifoin6
  assign RDY_xfifoin6 = inputfifo == 32'd1 && fifox6$FULL_N ;

  // action method xfifoin7
  assign RDY_xfifoin7 = inputfifo == 32'd1 && fifox7$FULL_N ;

  // action method yfifoin1
  assign RDY_yfifoin1 = inputfifo == 32'd1 && fifoyin1$FULL_N ;

  // action method yfifoin2
  assign RDY_yfifoin2 = inputfifo == 32'd1 && fifoyin2$FULL_N ;

  // action method yfifoin3
  assign RDY_yfifoin3 = inputfifo == 32'd1 && fifoyin3$FULL_N ;

  // action method yfifoin4
  assign RDY_yfifoin4 = inputfifo == 32'd1 && fifoyin4$FULL_N ;

  // actionvalue method yfifoout1
  assign yfifoout1 = fifoy1$D_OUT ;
  assign RDY_yfifoout1 = outfifo == 32'd1 && fifoy1$EMPTY_N ;

  // actionvalue method yfifoout2
  assign yfifoout2 = fifoy2$D_OUT ;
  assign RDY_yfifoout2 = outfifo == 32'd1 && fifoy2$EMPTY_N ;

  // actionvalue method yfifoout3
  assign yfifoout3 = fifoy3$D_OUT ;
  assign RDY_yfifoout3 = outfifo == 32'd1 && fifoy3$EMPTY_N ;

  // actionvalue method yfifoout4
  assign yfifoout4 = fifoy4$D_OUT ;
  assign RDY_yfifoout4 = outfifo == 32'd1 && fifoy4$EMPTY_N ;

  // action method wfifoin1
  assign RDY_wfifoin1 = weightfifo == 32'd1 && fifow1$FULL_N ;

  // action method wfifoin2
  assign RDY_wfifoin2 = weightfifo == 32'd1 && fifow2$FULL_N ;

  // action method wfifoin3
  assign RDY_wfifoin3 = weightfifo == 32'd1 && fifow3$FULL_N ;

  // action method wfifoin4
  assign RDY_wfifoin4 = weightfifo == 32'd1 && fifow4$FULL_N ;

  // action method tr_inputfifo
  assign RDY_tr_inputfifo = 1'd1 ;

  // action method tr_outfifo
  assign RDY_tr_outfifo = 1'd1 ;

  // action method tr_weightfifo
  assign RDY_tr_weightfifo = 1'd1 ;

  // action method tr_weigh
  assign RDY_tr_weigh = 1'd1 ;

  // action method tr_conv
  assign RDY_tr_conv = 1'd1 ;

  // value method tr_convout
  assign tr_convout = conout ;
  assign RDY_tr_convout = 1'd1 ;

  // action method pearray_xinput1
  assign RDY_pearray_xinput1 = pearr$RDY_xinput1 ;

  // action method pearray_xinput2
  assign RDY_pearray_xinput2 = pearr$RDY_xinput2 ;

  // action method pearray_xinput3
  assign RDY_pearray_xinput3 = pearr$RDY_xinput3 ;

  // action method pearray_xinput4
  assign RDY_pearray_xinput4 = pearr$RDY_xinput4 ;

  // action method pearray_xinput5
  assign RDY_pearray_xinput5 = pearr$RDY_xinput5 ;

  // action method pearray_xinput6
  assign RDY_pearray_xinput6 = pearr$RDY_xinput6 ;

  // action method pearray_xinput7
  assign RDY_pearray_xinput7 = pearr$RDY_xinput7 ;

  // action method pearray_yinput1
  assign RDY_pearray_yinput1 = pearr$RDY_yinput1 ;

  // action method pearray_yinput2
  assign RDY_pearray_yinput2 = pearr$RDY_yinput2 ;

  // action method pearray_yinput3
  assign RDY_pearray_yinput3 = pearr$RDY_yinput3 ;

  // action method pearray_yinput4
  assign RDY_pearray_yinput4 = pearr$RDY_yinput4 ;

  // action method pearray_winput1
  assign RDY_pearray_winput1 = pearr$RDY_winput1 ;

  // action method pearray_winput2
  assign RDY_pearray_winput2 = pearr$RDY_winput2 ;

  // action method pearray_winput3
  assign RDY_pearray_winput3 = pearr$RDY_winput3 ;

  // action method pearray_winput4
  assign RDY_pearray_winput4 = pearr$RDY_winput4 ;

  // value method pearray_youtput1
  assign pearray_youtput1 = pearr$youtput1 ;
  assign RDY_pearray_youtput1 = pearr$RDY_youtput1 ;

  // value method pearray_youtput2
  assign pearray_youtput2 = pearr$youtput2 ;
  assign RDY_pearray_youtput2 = pearr$RDY_youtput2 ;

  // value method pearray_youtput3
  assign pearray_youtput3 = pearr$youtput3 ;
  assign RDY_pearray_youtput3 = pearr$RDY_youtput3 ;

  // value method pearray_youtput4
  assign pearray_youtput4 = pearr$youtput4 ;
  assign RDY_pearray_youtput4 = pearr$RDY_youtput4 ;

  // action method pearray_weighttran
  assign RDY_pearray_weighttran = 1'd1 ;

  // action method pearray_convs
  assign RDY_pearray_convs = 1'd1 ;

  // submodule fifow1
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fifow1(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifow1$D_IN),
				      .ENQ(fifow1$ENQ),
				      .DEQ(fifow1$DEQ),
				      .CLR(fifow1$CLR),
				      .D_OUT(fifow1$D_OUT),
				      .FULL_N(fifow1$FULL_N),
				      .EMPTY_N(fifow1$EMPTY_N));

  // submodule fifow2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fifow2(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifow2$D_IN),
				      .ENQ(fifow2$ENQ),
				      .DEQ(fifow2$DEQ),
				      .CLR(fifow2$CLR),
				      .D_OUT(fifow2$D_OUT),
				      .FULL_N(fifow2$FULL_N),
				      .EMPTY_N(fifow2$EMPTY_N));

  // submodule fifow3
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fifow3(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifow3$D_IN),
				      .ENQ(fifow3$ENQ),
				      .DEQ(fifow3$DEQ),
				      .CLR(fifow3$CLR),
				      .D_OUT(fifow3$D_OUT),
				      .FULL_N(fifow3$FULL_N),
				      .EMPTY_N(fifow3$EMPTY_N));

  // submodule fifow4
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fifow4(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifow4$D_IN),
				      .ENQ(fifow4$ENQ),
				      .DEQ(fifow4$DEQ),
				      .CLR(fifow4$CLR),
				      .D_OUT(fifow4$D_OUT),
				      .FULL_N(fifow4$FULL_N),
				      .EMPTY_N(fifow4$EMPTY_N));

  // submodule fifox1
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox1(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox1$D_IN),
				      .ENQ(fifox1$ENQ),
				      .DEQ(fifox1$DEQ),
				      .CLR(fifox1$CLR),
				      .D_OUT(fifox1$D_OUT),
				      .FULL_N(fifox1$FULL_N),
				      .EMPTY_N(fifox1$EMPTY_N));

  // submodule fifox2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox2(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox2$D_IN),
				      .ENQ(fifox2$ENQ),
				      .DEQ(fifox2$DEQ),
				      .CLR(fifox2$CLR),
				      .D_OUT(fifox2$D_OUT),
				      .FULL_N(fifox2$FULL_N),
				      .EMPTY_N(fifox2$EMPTY_N));

  // submodule fifox3
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox3(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox3$D_IN),
				      .ENQ(fifox3$ENQ),
				      .DEQ(fifox3$DEQ),
				      .CLR(fifox3$CLR),
				      .D_OUT(fifox3$D_OUT),
				      .FULL_N(fifox3$FULL_N),
				      .EMPTY_N(fifox3$EMPTY_N));

  // submodule fifox4
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox4(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox4$D_IN),
				      .ENQ(fifox4$ENQ),
				      .DEQ(fifox4$DEQ),
				      .CLR(fifox4$CLR),
				      .D_OUT(fifox4$D_OUT),
				      .FULL_N(fifox4$FULL_N),
				      .EMPTY_N(fifox4$EMPTY_N));

  // submodule fifox5
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox5(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox5$D_IN),
				      .ENQ(fifox5$ENQ),
				      .DEQ(fifox5$DEQ),
				      .CLR(fifox5$CLR),
				      .D_OUT(fifox5$D_OUT),
				      .FULL_N(fifox5$FULL_N),
				      .EMPTY_N(fifox5$EMPTY_N));

  // submodule fifox6
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox6(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox6$D_IN),
				      .ENQ(fifox6$ENQ),
				      .DEQ(fifox6$DEQ),
				      .CLR(fifox6$CLR),
				      .D_OUT(fifox6$D_OUT),
				      .FULL_N(fifox6$FULL_N),
				      .EMPTY_N(fifox6$EMPTY_N));

  // submodule fifox7
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifox7(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifox7$D_IN),
				      .ENQ(fifox7$ENQ),
				      .DEQ(fifox7$DEQ),
				      .CLR(fifox7$CLR),
				      .D_OUT(fifox7$D_OUT),
				      .FULL_N(fifox7$FULL_N),
				      .EMPTY_N(fifox7$EMPTY_N));

  // submodule fifoy1
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoy1(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifoy1$D_IN),
				      .ENQ(fifoy1$ENQ),
				      .DEQ(fifoy1$DEQ),
				      .CLR(fifoy1$CLR),
				      .D_OUT(fifoy1$D_OUT),
				      .FULL_N(fifoy1$FULL_N),
				      .EMPTY_N(fifoy1$EMPTY_N));

  // submodule fifoy2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoy2(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifoy2$D_IN),
				      .ENQ(fifoy2$ENQ),
				      .DEQ(fifoy2$DEQ),
				      .CLR(fifoy2$CLR),
				      .D_OUT(fifoy2$D_OUT),
				      .FULL_N(fifoy2$FULL_N),
				      .EMPTY_N(fifoy2$EMPTY_N));

  // submodule fifoy3
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoy3(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifoy3$D_IN),
				      .ENQ(fifoy3$ENQ),
				      .DEQ(fifoy3$DEQ),
				      .CLR(fifoy3$CLR),
				      .D_OUT(fifoy3$D_OUT),
				      .FULL_N(fifoy3$FULL_N),
				      .EMPTY_N(fifoy3$EMPTY_N));

  // submodule fifoy4
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoy4(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(fifoy4$D_IN),
				      .ENQ(fifoy4$ENQ),
				      .DEQ(fifoy4$DEQ),
				      .CLR(fifoy4$CLR),
				      .D_OUT(fifoy4$D_OUT),
				      .FULL_N(fifoy4$FULL_N),
				      .EMPTY_N(fifoy4$EMPTY_N));

  // submodule fifoyin1
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoyin1(.RST(RST_N),
					.CLK(CLK),
					.D_IN(fifoyin1$D_IN),
					.ENQ(fifoyin1$ENQ),
					.DEQ(fifoyin1$DEQ),
					.CLR(fifoyin1$CLR),
					.D_OUT(fifoyin1$D_OUT),
					.FULL_N(fifoyin1$FULL_N),
					.EMPTY_N(fifoyin1$EMPTY_N));

  // submodule fifoyin2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoyin2(.RST(RST_N),
					.CLK(CLK),
					.D_IN(fifoyin2$D_IN),
					.ENQ(fifoyin2$ENQ),
					.DEQ(fifoyin2$DEQ),
					.CLR(fifoyin2$CLR),
					.D_OUT(fifoyin2$D_OUT),
					.FULL_N(fifoyin2$FULL_N),
					.EMPTY_N(fifoyin2$EMPTY_N));

  // submodule fifoyin3
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoyin3(.RST(RST_N),
					.CLK(CLK),
					.D_IN(fifoyin3$D_IN),
					.ENQ(fifoyin3$ENQ),
					.DEQ(fifoyin3$DEQ),
					.CLR(fifoyin3$CLR),
					.D_OUT(fifoyin3$D_OUT),
					.FULL_N(fifoyin3$FULL_N),
					.EMPTY_N(fifoyin3$EMPTY_N));

  // submodule fifoyin4
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd6),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) fifoyin4(.RST(RST_N),
					.CLK(CLK),
					.D_IN(fifoyin4$D_IN),
					.ENQ(fifoyin4$ENQ),
					.DEQ(fifoyin4$DEQ),
					.CLR(fifoyin4$CLR),
					.D_OUT(fifoyin4$D_OUT),
					.FULL_N(fifoyin4$FULL_N),
					.EMPTY_N(fifoyin4$EMPTY_N));

  // submodule pearr
  mkPEArray pearr(.CLK(CLK),
		  .RST_N(RST_N),
		  .convs_x(pearr$convs_x),
		  .weighttran_x(pearr$weighttran_x),
		  .winput1_x(pearr$winput1_x),
		  .winput2_x(pearr$winput2_x),
		  .winput3_x(pearr$winput3_x),
		  .winput4_x(pearr$winput4_x),
		  .xinput1_x(pearr$xinput1_x),
		  .xinput2_x(pearr$xinput2_x),
		  .xinput3_x(pearr$xinput3_x),
		  .xinput4_x(pearr$xinput4_x),
		  .xinput5_x(pearr$xinput5_x),
		  .xinput6_x(pearr$xinput6_x),
		  .xinput7_x(pearr$xinput7_x),
		  .yinput1_x(pearr$yinput1_x),
		  .yinput2_x(pearr$yinput2_x),
		  .yinput3_x(pearr$yinput3_x),
		  .yinput4_x(pearr$yinput4_x),
		  .EN_xinput1(pearr$EN_xinput1),
		  .EN_xinput2(pearr$EN_xinput2),
		  .EN_xinput3(pearr$EN_xinput3),
		  .EN_xinput4(pearr$EN_xinput4),
		  .EN_xinput5(pearr$EN_xinput5),
		  .EN_xinput6(pearr$EN_xinput6),
		  .EN_xinput7(pearr$EN_xinput7),
		  .EN_yinput1(pearr$EN_yinput1),
		  .EN_yinput2(pearr$EN_yinput2),
		  .EN_yinput3(pearr$EN_yinput3),
		  .EN_yinput4(pearr$EN_yinput4),
		  .EN_winput1(pearr$EN_winput1),
		  .EN_winput2(pearr$EN_winput2),
		  .EN_winput3(pearr$EN_winput3),
		  .EN_winput4(pearr$EN_winput4),
		  .EN_weighttran(pearr$EN_weighttran),
		  .EN_convs(pearr$EN_convs),
		  .RDY_xinput1(pearr$RDY_xinput1),
		  .RDY_xinput2(pearr$RDY_xinput2),
		  .RDY_xinput3(pearr$RDY_xinput3),
		  .RDY_xinput4(pearr$RDY_xinput4),
		  .RDY_xinput5(pearr$RDY_xinput5),
		  .RDY_xinput6(pearr$RDY_xinput6),
		  .RDY_xinput7(pearr$RDY_xinput7),
		  .RDY_yinput1(pearr$RDY_yinput1),
		  .RDY_yinput2(pearr$RDY_yinput2),
		  .RDY_yinput3(pearr$RDY_yinput3),
		  .RDY_yinput4(pearr$RDY_yinput4),
		  .RDY_winput1(pearr$RDY_winput1),
		  .RDY_winput2(pearr$RDY_winput2),
		  .RDY_winput3(pearr$RDY_winput3),
		  .RDY_winput4(pearr$RDY_winput4),
		  .youtput1(pearr$youtput1),
		  .RDY_youtput1(pearr$RDY_youtput1),
		  .youtput2(pearr$youtput2),
		  .RDY_youtput2(pearr$RDY_youtput2),
		  .youtput3(pearr$youtput3),
		  .RDY_youtput3(pearr$RDY_youtput3),
		  .youtput4(pearr$youtput4),
		  .RDY_youtput4(pearr$RDY_youtput4),
		  .RDY_weighttran(),
		  .RDY_convs());

  // rule RL_rl_xinput1
  assign WILL_FIRE_RL_rl_xinput1 =
	     pearr$RDY_xinput1 && fifox1$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_xinput2
  assign WILL_FIRE_RL_rl_xinput2 =
	     pearr$RDY_xinput2 && fifox2$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_xinput3
  assign WILL_FIRE_RL_rl_xinput3 =
	     pearr$RDY_xinput3 && fifox3$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_xinput4
  assign WILL_FIRE_RL_rl_xinput4 =
	     pearr$RDY_xinput4 && fifox4$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_xinput5
  assign WILL_FIRE_RL_rl_xinput5 =
	     pearr$RDY_xinput5 && fifox5$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_xinput6
  assign WILL_FIRE_RL_rl_xinput6 =
	     pearr$RDY_xinput6 && fifox6$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_xinput7
  assign WILL_FIRE_RL_rl_xinput7 =
	     pearr$RDY_xinput7 && fifox7$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_yinput1
  assign WILL_FIRE_RL_rl_yinput1 =
	     pearr$RDY_yinput1 && fifoyin1$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_yinput2
  assign WILL_FIRE_RL_rl_yinput2 =
	     pearr$RDY_yinput2 && fifoyin2$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_yinput3
  assign WILL_FIRE_RL_rl_yinput3 =
	     pearr$RDY_yinput3 && fifoyin3$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_yinput4
  assign WILL_FIRE_RL_rl_yinput4 =
	     pearr$RDY_yinput4 && fifoyin4$EMPTY_N && con == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_winput1
  assign WILL_FIRE_RL_rl_winput1 =
	     pearr$RDY_winput1 && fifow1$EMPTY_N && weigh == 32'd1 &&
	     con == 32'd0 ;

  // rule RL_rl_winput2
  assign WILL_FIRE_RL_rl_winput2 =
	     pearr$RDY_winput2 && fifow2$EMPTY_N && weigh == 32'd1 &&
	     con == 32'd0 ;

  // rule RL_rl_winput3
  assign WILL_FIRE_RL_rl_winput3 =
	     pearr$RDY_winput3 && fifow3$EMPTY_N && weigh == 32'd1 &&
	     con == 32'd0 ;

  // rule RL_rl_winput4
  assign WILL_FIRE_RL_rl_winput4 =
	     pearr$RDY_winput4 && fifow4$EMPTY_N && weigh == 32'd1 &&
	     con == 32'd0 ;

  // rule RL_rl_youtput1
  assign WILL_FIRE_RL_rl_youtput1 =
	     pearr$RDY_youtput1 && fifoy1$FULL_N && conout == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_youtput2
  assign WILL_FIRE_RL_rl_youtput2 =
	     pearr$RDY_youtput2 && fifoy2$FULL_N && conout == 32'd1 &&
	     weigh == 32'd0 ;

  // rule RL_rl_conout_end
  assign WILL_FIRE_RL_rl_conout_end = counter2 == 32'd13 && conout != 32'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_counter$write_1__VAL_2 = counter + 32'd1 ;
  assign MUX_counter2$write_1__VAL_1 = counter2 + 32'd1 ;

  // register con
  assign con$D_IN = (tr_conv_x == 32'd1) ? tr_conv_x : 32'd0 ;
  assign con$EN = EN_tr_conv ;

  // register conout
  assign conout$D_IN = WILL_FIRE_RL_rl_conout_end ? 32'd0 : 32'd1 ;
  assign conout$EN = WILL_FIRE_RL_rl_conout_end || counter == 32'd3 ;

  // register counter
  assign counter$D_IN =
	     WILL_FIRE_RL_rl_conout_end ? 32'd0 : MUX_counter$write_1__VAL_2 ;
  assign counter$EN =
	     con == 32'd1 && weigh == 32'd0 || WILL_FIRE_RL_rl_conout_end ;

  // register counter2
  assign counter2$D_IN =
	     (conout == 32'd1) ? MUX_counter2$write_1__VAL_1 : 32'd0 ;
  assign counter2$EN = conout == 32'd1 || WILL_FIRE_RL_rl_conout_end ;

  // register inputfifo
  assign inputfifo$D_IN = (tr_inputfifo_x == 32'd1) ? tr_inputfifo_x : 32'd0 ;
  assign inputfifo$EN = EN_tr_inputfifo ;

  // register outfifo
  assign outfifo$D_IN = (tr_outfifo_x == 32'd1) ? tr_outfifo_x : 32'd0 ;
  assign outfifo$EN = EN_tr_outfifo ;

  // register weigh
  assign weigh$D_IN = (tr_weigh_x == 32'd1) ? tr_weigh_x : 32'd0 ;
  assign weigh$EN = EN_tr_weigh ;

  // register weightfifo
  assign weightfifo$D_IN =
	     (tr_weightfifo_x == 32'd1) ? tr_weightfifo_x : 32'd0 ;
  assign weightfifo$EN = EN_tr_weightfifo ;

  // submodule fifow1
  assign fifow1$D_IN = wfifoin1_x ;
  assign fifow1$ENQ = EN_wfifoin1 ;
  assign fifow1$DEQ = WILL_FIRE_RL_rl_winput1 ;
  assign fifow1$CLR = 1'b0 ;

  // submodule fifow2
  assign fifow2$D_IN = wfifoin2_x ;
  assign fifow2$ENQ = EN_wfifoin2 ;
  assign fifow2$DEQ = WILL_FIRE_RL_rl_winput2 ;
  assign fifow2$CLR = 1'b0 ;

  // submodule fifow3
  assign fifow3$D_IN = wfifoin3_x ;
  assign fifow3$ENQ = EN_wfifoin3 ;
  assign fifow3$DEQ = WILL_FIRE_RL_rl_winput3 ;
  assign fifow3$CLR = 1'b0 ;

  // submodule fifow4
  assign fifow4$D_IN = wfifoin4_x ;
  assign fifow4$ENQ = EN_wfifoin4 ;
  assign fifow4$DEQ = WILL_FIRE_RL_rl_winput4 ;
  assign fifow4$CLR = 1'b0 ;

  // submodule fifox1
  assign fifox1$D_IN = xfifoin1_x ;
  assign fifox1$ENQ = EN_xfifoin1 ;
  assign fifox1$DEQ = WILL_FIRE_RL_rl_xinput1 ;
  assign fifox1$CLR = 1'b0 ;

  // submodule fifox2
  assign fifox2$D_IN = xfifoin2_x ;
  assign fifox2$ENQ = EN_xfifoin2 ;
  assign fifox2$DEQ = WILL_FIRE_RL_rl_xinput2 ;
  assign fifox2$CLR = 1'b0 ;

  // submodule fifox3
  assign fifox3$D_IN = xfifoin3_x ;
  assign fifox3$ENQ = EN_xfifoin3 ;
  assign fifox3$DEQ = WILL_FIRE_RL_rl_xinput3 ;
  assign fifox3$CLR = 1'b0 ;

  // submodule fifox4
  assign fifox4$D_IN = xfifoin4_x ;
  assign fifox4$ENQ = EN_xfifoin4 ;
  assign fifox4$DEQ = WILL_FIRE_RL_rl_xinput4 ;
  assign fifox4$CLR = 1'b0 ;

  // submodule fifox5
  assign fifox5$D_IN = xfifoin5_x ;
  assign fifox5$ENQ = EN_xfifoin5 ;
  assign fifox5$DEQ = WILL_FIRE_RL_rl_xinput5 ;
  assign fifox5$CLR = 1'b0 ;

  // submodule fifox6
  assign fifox6$D_IN = xfifoin6_x ;
  assign fifox6$ENQ = EN_xfifoin6 ;
  assign fifox6$DEQ = WILL_FIRE_RL_rl_xinput6 ;
  assign fifox6$CLR = 1'b0 ;

  // submodule fifox7
  assign fifox7$D_IN = xfifoin7_x ;
  assign fifox7$ENQ = EN_xfifoin7 ;
  assign fifox7$DEQ = WILL_FIRE_RL_rl_xinput7 ;
  assign fifox7$CLR = 1'b0 ;

  // submodule fifoy1
  assign fifoy1$D_IN = pearr$youtput1 ;
  assign fifoy1$ENQ = WILL_FIRE_RL_rl_youtput1 ;
  assign fifoy1$DEQ = EN_yfifoout1 ;
  assign fifoy1$CLR = 1'b0 ;

  // submodule fifoy2
  assign fifoy2$D_IN = pearr$youtput2 ;
  assign fifoy2$ENQ = WILL_FIRE_RL_rl_youtput2 ;
  assign fifoy2$DEQ = EN_yfifoout2 ;
  assign fifoy2$CLR = 1'b0 ;

  // submodule fifoy3
  assign fifoy3$D_IN = pearr$youtput3 ;
  assign fifoy3$ENQ =
	     pearr$RDY_youtput3 && fifoy3$FULL_N && conout == 32'd1 &&
	     weigh == 32'd0 ;
  assign fifoy3$DEQ = EN_yfifoout3 ;
  assign fifoy3$CLR = 1'b0 ;

  // submodule fifoy4
  assign fifoy4$D_IN = pearr$youtput4 ;
  assign fifoy4$ENQ =
	     pearr$RDY_youtput4 && fifoy4$FULL_N && conout == 32'd1 &&
	     weigh == 32'd0 ;
  assign fifoy4$DEQ = EN_yfifoout4 ;
  assign fifoy4$CLR = 1'b0 ;

  // submodule fifoyin1
  assign fifoyin1$D_IN = yfifoin1_x ;
  assign fifoyin1$ENQ = EN_yfifoin1 ;
  assign fifoyin1$DEQ = WILL_FIRE_RL_rl_yinput1 ;
  assign fifoyin1$CLR = 1'b0 ;

  // submodule fifoyin2
  assign fifoyin2$D_IN = yfifoin2_x ;
  assign fifoyin2$ENQ = EN_yfifoin2 ;
  assign fifoyin2$DEQ = WILL_FIRE_RL_rl_yinput2 ;
  assign fifoyin2$CLR = 1'b0 ;

  // submodule fifoyin3
  assign fifoyin3$D_IN = yfifoin3_x ;
  assign fifoyin3$ENQ = EN_yfifoin3 ;
  assign fifoyin3$DEQ = WILL_FIRE_RL_rl_yinput3 ;
  assign fifoyin3$CLR = 1'b0 ;

  // submodule fifoyin4
  assign fifoyin4$D_IN = yfifoin4_x ;
  assign fifoyin4$ENQ = EN_yfifoin4 ;
  assign fifoyin4$DEQ = WILL_FIRE_RL_rl_yinput4 ;
  assign fifoyin4$CLR = 1'b0 ;

  // submodule pearr
  assign pearr$convs_x = pearray_convs_x ;
  assign pearr$weighttran_x = pearray_weighttran_x ;
  assign pearr$winput1_x =
	     WILL_FIRE_RL_rl_winput1 ? fifow1$D_OUT : pearray_winput1_x ;
  assign pearr$winput2_x =
	     WILL_FIRE_RL_rl_winput2 ? fifow2$D_OUT : pearray_winput2_x ;
  assign pearr$winput3_x =
	     WILL_FIRE_RL_rl_winput3 ? fifow3$D_OUT : pearray_winput3_x ;
  assign pearr$winput4_x =
	     WILL_FIRE_RL_rl_winput4 ? fifow4$D_OUT : pearray_winput4_x ;
  assign pearr$xinput1_x =
	     WILL_FIRE_RL_rl_xinput1 ? fifox1$D_OUT : pearray_xinput1_x ;
  assign pearr$xinput2_x =
	     WILL_FIRE_RL_rl_xinput2 ? fifox2$D_OUT : pearray_xinput2_x ;
  assign pearr$xinput3_x =
	     WILL_FIRE_RL_rl_xinput3 ? fifox3$D_OUT : pearray_xinput3_x ;
  assign pearr$xinput4_x =
	     WILL_FIRE_RL_rl_xinput4 ? fifox4$D_OUT : pearray_xinput4_x ;
  assign pearr$xinput5_x =
	     WILL_FIRE_RL_rl_xinput5 ? fifox5$D_OUT : pearray_xinput5_x ;
  assign pearr$xinput6_x =
	     WILL_FIRE_RL_rl_xinput6 ? fifox6$D_OUT : pearray_xinput6_x ;
  assign pearr$xinput7_x =
	     WILL_FIRE_RL_rl_xinput7 ? fifox7$D_OUT : pearray_xinput7_x ;
  assign pearr$yinput1_x =
	     WILL_FIRE_RL_rl_yinput1 ? fifoyin1$D_OUT : pearray_yinput1_x ;
  assign pearr$yinput2_x =
	     WILL_FIRE_RL_rl_yinput2 ? fifoyin2$D_OUT : pearray_yinput2_x ;
  assign pearr$yinput3_x =
	     WILL_FIRE_RL_rl_yinput3 ? fifoyin3$D_OUT : pearray_yinput3_x ;
  assign pearr$yinput4_x =
	     WILL_FIRE_RL_rl_yinput4 ? fifoyin4$D_OUT : pearray_yinput4_x ;
  assign pearr$EN_xinput1 = EN_pearray_xinput1 || WILL_FIRE_RL_rl_xinput1 ;
  assign pearr$EN_xinput2 = EN_pearray_xinput2 || WILL_FIRE_RL_rl_xinput2 ;
  assign pearr$EN_xinput3 = EN_pearray_xinput3 || WILL_FIRE_RL_rl_xinput3 ;
  assign pearr$EN_xinput4 = EN_pearray_xinput4 || WILL_FIRE_RL_rl_xinput4 ;
  assign pearr$EN_xinput5 = EN_pearray_xinput5 || WILL_FIRE_RL_rl_xinput5 ;
  assign pearr$EN_xinput6 = EN_pearray_xinput6 || WILL_FIRE_RL_rl_xinput6 ;
  assign pearr$EN_xinput7 = EN_pearray_xinput7 || WILL_FIRE_RL_rl_xinput7 ;
  assign pearr$EN_yinput1 = EN_pearray_yinput1 || WILL_FIRE_RL_rl_yinput1 ;
  assign pearr$EN_yinput2 = EN_pearray_yinput2 || WILL_FIRE_RL_rl_yinput2 ;
  assign pearr$EN_yinput3 = EN_pearray_yinput3 || WILL_FIRE_RL_rl_yinput3 ;
  assign pearr$EN_yinput4 = EN_pearray_yinput4 || WILL_FIRE_RL_rl_yinput4 ;
  assign pearr$EN_winput1 = EN_pearray_winput1 || WILL_FIRE_RL_rl_winput1 ;
  assign pearr$EN_winput2 = EN_pearray_winput2 || WILL_FIRE_RL_rl_winput2 ;
  assign pearr$EN_winput3 = EN_pearray_winput3 || WILL_FIRE_RL_rl_winput3 ;
  assign pearr$EN_winput4 = EN_pearray_winput4 || WILL_FIRE_RL_rl_winput4 ;
  assign pearr$EN_weighttran = EN_pearray_weighttran ;
  assign pearr$EN_convs = EN_pearray_convs ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        con <= `BSV_ASSIGNMENT_DELAY 32'd0;
	conout <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inputfifo <= `BSV_ASSIGNMENT_DELAY 32'd0;
	outfifo <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weigh <= `BSV_ASSIGNMENT_DELAY 32'd0;
	weightfifo <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (con$EN) con <= `BSV_ASSIGNMENT_DELAY con$D_IN;
	if (conout$EN) conout <= `BSV_ASSIGNMENT_DELAY conout$D_IN;
	if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (counter2$EN) counter2 <= `BSV_ASSIGNMENT_DELAY counter2$D_IN;
	if (inputfifo$EN) inputfifo <= `BSV_ASSIGNMENT_DELAY inputfifo$D_IN;
	if (outfifo$EN) outfifo <= `BSV_ASSIGNMENT_DELAY outfifo$D_IN;
	if (weigh$EN) weigh <= `BSV_ASSIGNMENT_DELAY weigh$D_IN;
	if (weightfifo$EN)
	  weightfifo <= `BSV_ASSIGNMENT_DELAY weightfifo$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    con = 32'hAAAAAAAA;
    conout = 32'hAAAAAAAA;
    counter = 32'hAAAAAAAA;
    counter2 = 32'hAAAAAAAA;
    inputfifo = 32'hAAAAAAAA;
    outfifo = 32'hAAAAAAAA;
    weigh = 32'hAAAAAAAA;
    weightfifo = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xfifoin1)
	begin
	  v__h3607 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_xfifoin1) $display("%t xfifoin1 fired", v__h3607);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoin1)
	begin
	  v__h3763 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoin1) $display("%t yfifoin1 fired", v__h3763);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout1)
	begin
	  v__h3907 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout1)
	$display("%t yfifoout1 x = %0d", v__h3907, fifoy1$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout2)
	begin
	  v__h3987 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout2)
	$display("%t yfifoout2 x = %0d", v__h3987, fifoy2$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout3)
	begin
	  v__h4067 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout3)
	$display("%t yfifoout3 x = %0d", v__h4067, fifoy3$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout4)
	begin
	  v__h4147 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_yfifoout4)
	$display("%t yfifoout4 x = %0d", v__h4147, fifoy4$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_xinput1)
	begin
	  v__h2386 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_xinput1) $display("%t rl_xinput1 fired", v__h2386);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_yinput1)
	begin
	  v__h2757 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_yinput1) $display("%t rl_yinput1 fired", v__h2757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_winput1)
	begin
	  v__h3061 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_winput1)
	$display("%t rl_winput1 fired w: %0d", v__h3061, fifow1$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_youtput1)
	begin
	  v__h3293 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_youtput1)
	$display("%t rl_youtput1 fired enq value: %0d",
		 v__h3293,
		 pearr$youtput1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_youtput2)
	begin
	  v__h3340 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_youtput2)
	$display("%t rl_youtput2 fired enq value: %0d",
		 v__h3340,
		 pearr$youtput2);
  end
  // synopsys translate_on
endmodule  // mkPEFifo

